<channel version="4.5.2">
  <id>ddd4fb6b-0232-4af2-b32d-9022674322a0</id>
  <nextMetaDataId>3</nextMetaDataId>
  <name>0000a Orden de ejecucin en el canal</name>
  <description>Canal simple que recibe HL7 v2.x por MLLP en el puerto 6661 y lo guarda en un directorio.&#xd;
Se hace un log en cada script, transformador y filtro para mostar el orden de ejecuci√≥n de los mismos.&#xd;
Los mensajes pueden ser enviados por HAPI Test Panel, no importa el tipo de mensaje.</description>
  <revision>8</revision>
  <sourceConnector version="4.5.2">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.tcp.TcpReceiverProperties" version="4.5.2">
      <pluginProperties/>
      <listenerConnectorProperties version="4.5.2">
        <host>0.0.0.0</host>
        <port>6661</port>
      </listenerConnectorProperties>
      <sourceConnectorProperties version="4.5.2">
        <responseVariable>ackresp</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>true</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
      <transmissionModeProperties class="com.mirth.connect.plugins.mllpmode.MLLPModeProperties">
        <pluginPointName>MLLP</pluginPointName>
        <startOfMessageBytes>0B</startOfMessageBytes>
        <endOfMessageBytes>1C0D</endOfMessageBytes>
        <useMLLPv2>false</useMLLPv2>
        <ackBytes>06</ackBytes>
        <nackBytes>15</nackBytes>
        <maxRetries>2</maxRetries>
      </transmissionModeProperties>
      <serverMode>true</serverMode>
      <remoteAddress></remoteAddress>
      <remotePort></remotePort>
      <overrideLocalBinding>false</overrideLocalBinding>
      <reconnectInterval>5000</reconnectInterval>
      <receiveTimeout>0</receiveTimeout>
      <bufferSize>65536</bufferSize>
      <maxConnections>10</maxConnections>
      <keepConnectionOpen>true</keepConnectionOpen>
      <dataTypeBinary>false</dataTypeBinary>
      <charsetEncoding>UTF-8</charsetEncoding>
      <respondOnNewConnection>0</respondOnNewConnection>
      <responseAddress></responseAddress>
      <responsePort></responsePort>
    </properties>
    <transformer version="4.5.2">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.5.2">
          <name>Log</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>logger.info(&quot;Source Transformer Step 1&quot;);</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.5.2">
          <name>Log 2</name>
          <sequenceNumber>1</sequenceNumber>
          <enabled>true</enabled>
          <script>logger.info(&quot;Source Transformer Step 2&quot;);</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
      </elements>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>HL7V2</inboundDataType>
      <outboundDataType>HL7V2</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.5.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.5.2">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.5.2">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.5.2">
          <splitType>MSH_Segment</splitType>
          <batchScript></batchScript>
        </batchProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.5.2">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
          <dateFormat>yyyyMMddHHmmss</dateFormat>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.5.2">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
          <validateMessageControlId>false</validateMessageControlId>
          <originalMessageControlId>Destination_Encoded</originalMessageControlId>
          <originalIdMapVariable></originalIdMapVariable>
        </responseValidationProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.5.2">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.5.2">
          <handleRepetitions>true</handleRepetitions>
          <handleSubcomponents>true</handleSubcomponents>
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <stripNamespaces>true</stripNamespaces>
          <segmentDelimiter>\r</segmentDelimiter>
          <convertLineBreaks>true</convertLineBreaks>
        </serializationProperties>
        <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.5.2">
          <useStrictParser>false</useStrictParser>
          <useStrictValidation>false</useStrictValidation>
          <segmentDelimiter>\r</segmentDelimiter>
        </deserializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.5.2">
          <splitType>MSH_Segment</splitType>
          <batchScript></batchScript>
        </batchProperties>
        <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.5.2">
          <segmentDelimiter>\r</segmentDelimiter>
          <successfulACKCode>AA</successfulACKCode>
          <successfulACKMessage></successfulACKMessage>
          <errorACKCode>AE</errorACKCode>
          <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
          <rejectedACKCode>AR</rejectedACKCode>
          <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
          <msh15ACKAccept>false</msh15ACKAccept>
          <dateFormat>yyyyMMddHHmmss</dateFormat>
        </responseGenerationProperties>
        <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.5.2">
          <successfulACKCode>AA,CA</successfulACKCode>
          <errorACKCode>AE,CE</errorACKCode>
          <rejectedACKCode>AR,CR</rejectedACKCode>
          <validateMessageControlId>false</validateMessageControlId>
          <originalMessageControlId>Destination_Encoded</originalMessageControlId>
          <originalIdMapVariable></originalIdMapVariable>
        </responseValidationProperties>
      </outboundProperties>
    </transformer>
    <filter version="4.5.2">
      <elements>
        <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="4.5.2">
          <name>log</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>logger.info(&quot;Source Filter Step 1&quot;);

return true;</script>
        </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
        <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="4.5.2">
          <name>log 2</name>
          <sequenceNumber>1</sequenceNumber>
          <enabled>true</enabled>
          <operator>AND</operator>
          <script>logger.info(&quot;Source Filter Step 2&quot;);


return true;</script>
        </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
      </elements>
    </filter>
    <transportName>TCP Listener</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="4.5.2">
      <metaDataId>1</metaDataId>
      <name>Destination 1</name>
      <properties class="com.mirth.connect.connectors.file.FileDispatcherProperties" version="4.5.2">
        <pluginProperties/>
        <destinationConnectorProperties version="4.5.2">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <scheme>FILE</scheme>
        <host>C:/curso-mirth/target</host>
        <outputPattern>${message.messageId}.hl7</outputPattern>
        <anonymous>true</anonymous>
        <username>anonymous</username>
        <password>anonymous</password>
        <timeout>10000</timeout>
        <keepConnectionOpen>true</keepConnectionOpen>
        <maxIdleTime>0</maxIdleTime>
        <secure>true</secure>
        <passive>true</passive>
        <validateConnection>true</validateConnection>
        <outputAppend>true</outputAppend>
        <errorOnExists>false</errorOnExists>
        <temporary>false</temporary>
        <binary>false</binary>
        <charsetEncoding>UTF-8</charsetEncoding>
        <template>${message.messageId}</template>
      </properties>
      <transformer version="4.5.2">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.5.2">
            <name>Log</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>logger.info(&quot;Destination 1 Transformer&quot;);

// http://207.38.40.43/community/forums/showthread.php?p=44212
var ackMessage = ACKGenerator.generateAckResponse(connectorMessage.getRawData(), &quot;AA&quot;, &quot;Message Successfully Received&quot;);
responseMap.put(&quot;ackresp&quot;, ResponseFactory.getSentResponse(ackMessage));</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>HL7V2</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.5.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.5.2">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.5.2">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.5.2">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.5.2">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.5.2">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>false</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.5.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.5.2">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.5.2">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.5.2">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.5.2">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.5.2">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>false</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="4.5.2">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="4.5.2">
            <name>Log</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>logger.info(&quot;Destination 1 Response Transformer&quot;);

/*
return &quot;MSH|^~\&amp;|IFENG||REGADT|MCM|20160729023454||ACK^A04^ACK|20160729023454|P|2.5\r&quot; +
       &quot;MSA|AA|&quot;+ connectorMessage.getMessageId() +&quot;\r&quot;;
*/</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V2</inboundDataType>
        <outboundDataType>HL7V2</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.5.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.5.2">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.5.2">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.5.2">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.5.2">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.5.2">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>false</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DataTypeProperties" version="4.5.2">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2SerializationProperties" version="4.5.2">
            <handleRepetitions>true</handleRepetitions>
            <handleSubcomponents>true</handleSubcomponents>
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <stripNamespaces>true</stripNamespaces>
            <segmentDelimiter>\r</segmentDelimiter>
            <convertLineBreaks>true</convertLineBreaks>
          </serializationProperties>
          <deserializationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2DeserializationProperties" version="4.5.2">
            <useStrictParser>false</useStrictParser>
            <useStrictValidation>false</useStrictValidation>
            <segmentDelimiter>\r</segmentDelimiter>
          </deserializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2BatchProperties" version="4.5.2">
            <splitType>MSH_Segment</splitType>
            <batchScript></batchScript>
          </batchProperties>
          <responseGenerationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseGenerationProperties" version="4.5.2">
            <segmentDelimiter>\r</segmentDelimiter>
            <successfulACKCode>AA</successfulACKCode>
            <successfulACKMessage></successfulACKMessage>
            <errorACKCode>AE</errorACKCode>
            <errorACKMessage>An Error Occurred Processing Message.</errorACKMessage>
            <rejectedACKCode>AR</rejectedACKCode>
            <rejectedACKMessage>Message Rejected.</rejectedACKMessage>
            <msh15ACKAccept>false</msh15ACKAccept>
            <dateFormat>yyyyMMddHHmmss</dateFormat>
          </responseGenerationProperties>
          <responseValidationProperties class="com.mirth.connect.plugins.datatypes.hl7v2.HL7v2ResponseValidationProperties" version="4.5.2">
            <successfulACKCode>AA,CA</successfulACKCode>
            <errorACKCode>AE,CE</errorACKCode>
            <rejectedACKCode>AR,CR</rejectedACKCode>
            <validateMessageControlId>false</validateMessageControlId>
            <originalMessageControlId>Destination_Encoded</originalMessageControlId>
            <originalIdMapVariable></originalIdMapVariable>
          </responseValidationProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="4.5.2">
        <elements>
          <com.mirth.connect.plugins.javascriptrule.JavaScriptRule version="4.5.2">
            <name>Log</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>logger.info(&quot;Destination 1 Filter&quot;);

return true;</script>
          </com.mirth.connect.plugins.javascriptrule.JavaScriptRule>
        </elements>
      </filter>
      <transportName>File Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data

logger.info(&quot;Channel Preprocessor&quot;);

return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
logger.info(&quot;Channel Postprocessor&quot;);

return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

logger.info(&quot;Channel Deploy&quot;);

logger.info(&quot;Despliegue segunda version del canal&quot;);
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data

logger.info(&quot;Channel Undeploy&quot;);

return;</undeployScript>
  <properties version="4.5.2">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <encryptAttachments>false</encryptAttachments>
    <encryptCustomMetaData>false</encryptCustomMetaData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="4.5.2">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1732715917868</time>
        <timezone>America/Santiago</timezone>
      </lastModified>
      <pruningSettings>
        <pruneMetaDataDays>1</pruneMetaDataDays>
        <pruneContentDays>1</pruneContentDays>
        <archiveEnabled>true</archiveEnabled>
        <pruneErroredMessages>false</pruneErroredMessages>
      </pruningSettings>
      <userId>1</userId>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="4.5.2">
        <id>cff302f0-77bd-4aad-a1b7-8f37ce9d7757</id>
        <name>CENS-ADIMECH Functions</name>
        <revision>1</revision>
        <lastModified>
          <time>1732202737565</time>
          <timezone>America/Santiago</timezone>
        </lastModified>
        <description>Grupo de funciones para el parser CENS-ADIMECH</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>b46d9a89-9609-4a11-8035-40aca5024d78</string>
          <string>fac21808-36c6-4f79-9a53-988a2e904963</string>
          <string>48f21677-b04f-4388-abbc-dade55e87dc8</string>
          <string>69e2bce0-deae-4beb-9ad7-f5b9f7acfdc5</string>
          <string>5ca59f01-8010-441b-a10b-4ef7638ec21d</string>
          <string>c7fe5848-b428-47c8-b7a0-48be6107ba6b</string>
          <string>4013272e-b8e4-4107-aec7-f418fa8541a2</string>
          <string>2f9bec13-06c5-41ef-a660-39df1b6183b1</string>
          <string>3a3fd494-a20f-4400-83b3-8b4eb176d373</string>
          <string>9e22f42c-62d5-491c-8ee2-7ff2100c84ca</string>
          <string>e4eaca5e-7995-48a1-a222-8980dc3cb1a5</string>
          <string>0c9cc24a-626c-403e-aefb-6642af76ab85</string>
          <string>bf5f7109-95c4-44c0-987b-3389b03cff81</string>
          <string>63c5beaf-a15d-40eb-a954-e967480993a1</string>
          <string>20ee9ef1-ec5b-42f1-a2e8-8bcfd9a501a3</string>
          <string>f3f4ef90-5179-423f-8560-929d3e7bd4d0</string>
          <string>334ee284-7cd8-485e-ab6a-427902fc2be5</string>
          <string>99ff7c87-62b0-41cb-ab6c-76568bcf95f2</string>
          <string>4c783b83-4620-4d9f-9d0d-ab68ad92a4fa</string>
          <string>3a7d16d5-671a-4e3d-bb5b-be46ef227fab</string>
          <string>6392ddae-5a4e-4429-be8f-9240e150365a</string>
          <string>f02dd4c6-1ba9-4632-91b8-1873afc295da</string>
          <string>0b1b563a-954f-418b-aca2-2155e3ea2488</string>
          <string>3f6946da-5006-4059-bed5-55962106eaca</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.5.2">
            <id>51b0993b-ccc1-4065-955b-906f4a3e59e4</id>
            <name>CENS - Convert Date v2 to FHIR</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738191</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts an HL7 v2.x formatted date into the correct format for FHIR date.
	
	HL7 format expected: yyyyMMdd
	FHIR format: yyyy-MM-dd

	@param {String} date - The HL7 v2.x date string
	@return {String} The converted FHIR date string
*/

function convertDateV2ToFhir(date) {
	return convertToFhirTimestamp(date, &quot;yyyy-MM-dd&quot;);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>04754c18-374a-4522-94b3-be0715869019</id>
            <name>CENS - Convert DateTime V2 to FHIR</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202737780</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts an HL7 v2.x formatted timestamp into the correct format for FHIR dateTime.
	
	HL7 format expected: yyyyMMddHHmmssZZ
	FHIR format: yyyy-MM-dd&apos;T&apos;HH:mm:ssZZ

	@param {String} date - The HL7 v2.x timestamp string
	@return {String} The converted FHIR timestamp string
*/
function convertDateTimeV2ToFhir(date) {
	if (!date) {
		return &apos;&apos;;
	}

	var patterns = [
		&quot;yyyyMMddHHmmss.SSSZZ&quot;,
		&quot;yyyyMMddHHmmss.SSSZ&quot;,
		&quot;yyyyMMddHHmmss.SSS&quot;,
		&quot;yyyyMMddHHmmssZZ&quot;,
		&quot;yyyyMMddHHmmssZ&quot;,
		&quot;yyyyMMddHHmmss&quot;,
		&quot;yyyyMMddHHmm&quot;,
		&quot;yyyyMMddHH&quot;,
		&quot;yyyyMMdd&quot;
	];

	var instant;
	for each (pattern in patterns) {
		try {
			instant = org.joda.time.format.DateTimeFormat.forPattern(pattern).parseMillis(new String(date));
			break;
		} catch(e) {}
	}

	if (instant) {
		var outpattern = arguments.length &gt;= 2 ? arguments[1] : &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZZ&quot;;
		try {
			return org.joda.time.format.DateTimeFormat.forPattern(outpattern).print(instant);
		} catch (e) {}
	}

	logger.info(date);
	return date;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>bda35658-ef8b-40cd-bcb2-5bb57aae3cdd</id>
            <name>CENS - Convert Gender v2 to FHIR</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738126</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts an HL7 v2.x gender code to the corresponding FHIR code.

	@param {String} code - The HL7 gender code (Table 0001)
	@return {String} The FHIR administrative gender code
*/
function convertGenderV2ToFhir(code) {
	var fhirCode;
	
	switch ((code + &apos;&apos;).toUpperCase()) {
		case &apos;F&apos;:
			fhirCode = org.hl7.fhir.dstu3.model.codesystems.AdministrativeGender.FEMALE;
			break;
		case &apos;M&apos;:
			fhirCode = org.hl7.fhir.dstu3.model.codesystems.AdministrativeGender.MALE;
			break;
		case &apos;O&apos;:
		case &apos;A&apos;:
		case &apos;N&apos;:
			fhirCode = org.hl7.fhir.dstu3.model.codesystems.AdministrativeGender.OTHER;
			break;
		case &apos;U&apos;:
		default:
			fhirCode = org.hl7.fhir.dstu3.model.codesystems.AdministrativeGender.UNKNOWN;
	}

	return fhirCode.toCode();
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>c0fc9803-2184-4421-a0da-b2fd763ff6c1</id>
            <name>CENS - uuidv4</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738711</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function uuidv4(){
    var dt = new Date().getTime();
    var uuid = &apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;.replace(/[xy]/g, function(c) {
        var r = (dt + Math.random()*16)%16 | 0;
        dt = Math.floor(dt/16);
        return (c==&apos;x&apos; ? r :(r&amp;0x3|0x8)).toString(16);
    });
    return uuid;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.5.2">
        <id>9025896a-65d0-458c-92ac-335fe985a232</id>
        <name>HL7 v2.x to FHIR Helper Functions</name>
        <revision>1</revision>
        <lastModified>
          <time>1732202737571</time>
          <timezone>America/Santiago</timezone>
        </lastModified>
        <description>General functions to help convert HL7 v2.x to FHIR resources.

These are used by the example HL7 to FHIR transformer, as well as
the &quot;HL7 v2.x to FHIR Creation Functions&quot; code template library.</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>2f9bec13-06c5-41ef-a660-39df1b6183b1</string>
          <string>e4eaca5e-7995-48a1-a222-8980dc3cb1a5</string>
          <string>fac21808-36c6-4f79-9a53-988a2e904963</string>
          <string>20ee9ef1-ec5b-42f1-a2e8-8bcfd9a501a3</string>
          <string>48f21677-b04f-4388-abbc-dade55e87dc8</string>
          <string>69e2bce0-deae-4beb-9ad7-f5b9f7acfdc5</string>
          <string>f3f4ef90-5179-423f-8560-929d3e7bd4d0</string>
          <string>99ff7c87-62b0-41cb-ab6c-76568bcf95f2</string>
          <string>6392ddae-5a4e-4429-be8f-9240e150365a</string>
          <string>5ca59f01-8010-441b-a10b-4ef7638ec21d</string>
          <string>0b1b563a-954f-418b-aca2-2155e3ea2488</string>
          <string>4013272e-b8e4-4107-aec7-f418fa8541a2</string>
          <string>3f6946da-5006-4059-bed5-55962106eaca</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.5.2">
            <id>2cc062f8-aac9-48e1-947e-0567d4497e07</id>
            <name>Cleanup FHIR Patient</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738564</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Removes name / telecom / address entries with no actual value.

	@param {Object} patient - The JavaScript Object representing the FHIR Patient.
	@return {Object} The same Object passed in, cleaned up.
*/
function cleanupFhirPatient(patient) {
	// Remove names with no value
	cleanupFhirNames(patient, &apos;name&apos;);
	
	// Remove telecom entries with no value
	cleanupFhirTelecoms(patient, &apos;telecom&apos;);

	// Remove address entries with no value
	cleanupFhirAddresses(patient, &apos;address&apos;);

	if (patient.contact) {
		for each (contact in patient.contact) {
			if (!isFhirNameValid(contact.name)) {
				delete contact.name;
			}
			
			cleanupFhirTelecoms(contact, &apos;telecom&apos;);

			if (!isFhirAddressValid(contact.address)) {
				delete contact.address;
			}
		}
	}

	return patient;
}

function cleanupFhirNames(parent, property) {
	cleanupArray(parent, property, isFhirNameValid);
}

function isFhirNameValid(name) {
	return name &amp;&amp; (!isValueEmpty(name.text) || !isValueEmpty(name.family) || !isValueEmpty(name.given) || !isValueEmpty(name.prefix) || !isValueEmpty(name.suffix));
}

function cleanupFhirTelecoms(parent, property) {
	cleanupArray(parent, property, function(telecom) {
		return !isValueEmpty(telecom.value);
	});
}

function cleanupFhirAddresses(parent, property) {
	cleanupArray(parent, property, isFhirAddressValid);
}

function isFhirAddressValid(address) {
	return address &amp;&amp; (!isValueEmpty(address.text) || !isValueEmpty(address.line) || !isValueEmpty(address.city) || !isValueEmpty(address.state) || !isValueEmpty(address.postalCode) || !isValueEmpty(address.country));
}

function cleanupArray(parent, property, handleFunction) {
	var arr = parent[property];

	if (arr) {
		var length = arr.length;
		for (var i = length - 1; i &gt;= 0; i--) {
			if (!handleFunction(arr[i])) {
				delete arr[i];
				length--;
			}
		}
		arr.length = length;

		// Handle Java arrays
		if (arr.length != length) {
			parent[property] = org.apache.commons.lang3.ArrayUtils.subarray(arr, 0, length);
		}
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>2e62489a-423d-4471-a919-ed3f71827199</id>
            <name>Combine Arrays</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738436</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Combines two arrays into one. Works with both Java and JavaScript arrays.

	@param {Array} array1 - The first array.
	@param {Array} array2 - The second array.
	@return {Array} The combined array.
*/
function combineArrays(array1, array2) {
	var isJavaArray1 = Object.prototype.toString.call(array1) == &apos;[object JavaArray]&apos;;
	var isJavaArray2 = Object.prototype.toString.call(array2) == &apos;[object JavaArray]&apos;;

	if (isJavaArray1 &amp;&amp; isJavaArray2) {
		return org.apache.commons.lang3.ArrayUtils.addAll(array1, array2);
	} else if (isJavaArray1) {
		for (var i = array1.length - 1; i &gt;= 0; i--) {
			array2.unshift(array1[i]);
		}
		return array2;
	} else {
		for each (value in array2) {
			array1.push(value);
		}
		return array1;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>6faf1e4b-d159-4d34-a07a-2fe0a3bde4cf</id>
            <name>Consolidate Empty Properties</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738653</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Removes empty strings, objects and arrays from a JavaScript object.

	@param {Object/Array} obj - The object or array to consolidate.
	@return {Object/Array} The consolidates object or array.
*/
function consolidate(obj) {
	if (typeof obj != &apos;undefined&apos; &amp;&amp; obj != null) {
		var protoToString = Object.prototype.toString.call(obj);
		
		if (obj instanceof Array || protoToString == &apos;[object Array]&apos; || protoToString == &apos;[object JavaArray]&apos;) {
			var length = obj.length;
			
			for (var i = obj.length - 1; i &gt;= 0; i--) {
				if (!doConsolidate(obj, i)) {
					length--;
				}
			}
			obj.length = length;

			// Handle Java Arrays
			if (length != obj.length) {
				obj = org.apache.commons.lang3.ArrayUtils.subarray(obj, 0, length);
			}
		} else if (protoToString == &apos;[object Object]&apos;) {
			for (var property in obj) {
				doConsolidate(obj, property);
			}
		}
	}
	return obj;
}

function doConsolidate(obj, property) {
	var value = obj[property] = consolidate(obj[property]);
	var empty = isValueEmpty(value);
	if (empty) {
		delete obj[property];
	}
	return !empty;
}

function isValueEmpty(value) {
	var protoToString = Object.prototype.toString.call(value);

	if (typeof value == &apos;undefined&apos; || value == null) {
		return true;
	} else if (value instanceof Array || protoToString == &apos;[object Array]&apos; || protoToString == &apos;[object JavaArray]&apos;) {
		if (value.length &gt; 0) {
			for each (element in value) {
				if (!isValueEmpty(element)) {
					return false;
				}
			}
		}
		return true;
	} else if (typeof value == &apos;string&apos; || protoToString == &apos;[object String]&apos;) {
		return value.length == 0;
	} else if (value instanceof java.lang.String) {
		return org.apache.commons.lang3.StringUtils.isEmpty(value);
	} else if (protoToString == &apos;[object Object]&apos;) {
		for (var property in value) {
			if (!isValueEmpty(value[property])) {
				return false;
			}
		}
		return true;
	}

	return false;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>b7bffbe4-9da5-40a8-8a35-7e3ad5a9bebf</id>
            <name>Convert Address Use</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738409</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts an HL7 v2.x address type code to the corresponding FHIR address use.

	@param {String} code - The HL7 address type (Table 0190)
	@return {String} The FHIR address use code
*/
function convertAddressUse(code) {
	var fhirCode;
	
	switch ((code + &apos;&apos;).toUpperCase()) {
		case &apos;H&apos;:
		case &apos;L&apos;:
		case &apos;M&apos;:
		case &apos;P&apos;:
		case &apos;SH&apos;:
			fhirCode = org.hl7.fhir.dstu3.model.codesystems.AddressUse.HOME;
			break;
		case &apos;B&apos;:
		case &apos;O&apos;:
		case &apos;BI&apos;:
			fhirCode = org.hl7.fhir.dstu3.model.codesystems.AddressUse.WORK;
			break;
		case &apos;C&apos;:
		case &apos;V&apos;:
			fhirCode = org.hl7.fhir.dstu3.model.codesystems.AddressUse.TEMP;
			break;
		default:
			fhirCode = org.hl7.fhir.dstu3.model.codesystems.AddressUse.OLD;
	}

	return fhirCode.toCode();
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>687a3eef-3155-47c8-bb12-de158d0055ac</id>
            <name>Convert Date</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738345</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts an HL7 v2.x formatted date into the correct format for FHIR date.
	
	HL7 format expected: yyyyMMdd
	FHIR format: yyyy-MM-dd

	@param {String} date - The HL7 v2.x date string
	@return {String} The converted FHIR date string
*/
function convertToFhirDate(date) {
	return convertToFhirTimestamp(date, &quot;yyyy-MM-dd&quot;);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>f338c38c-477a-4dca-8714-2e96c382716e</id>
            <name>Convert Gender</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202737737</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts an HL7 v2.x gender code to the corresponding FHIR code.

	@param {String} code - The HL7 gender code (Table 0001)
	@return {String} The FHIR administrative gender code
*/
function convertToFhirGender(code) {
	var fhirCode;
	
	switch ((code + &apos;&apos;).toUpperCase()) {
		case &apos;F&apos;:
			fhirCode = org.hl7.fhir.dstu3.model.codesystems.AdministrativeGender.FEMALE;
			break;
		case &apos;M&apos;:
			fhirCode = org.hl7.fhir.dstu3.model.codesystems.AdministrativeGender.MALE;
			break;
		case &apos;O&apos;:
		case &apos;A&apos;:
		case &apos;N&apos;:
			fhirCode = org.hl7.fhir.dstu3.model.codesystems.AdministrativeGender.OTHER;
			break;
		case &apos;U&apos;:
		default:
			fhirCode = org.hl7.fhir.dstu3.model.codesystems.AdministrativeGender.UNKNOWN;
	}

	return fhirCode.toCode();
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>0061fef8-39be-48c1-b81e-60719c97c149</id>
            <name>Convert Timestamp</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202737691</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts an HL7 v2.x formatted timestamp into the correct format for FHIR dateTime.
	
	HL7 format expected: yyyyMMddHHmmssZZ
	FHIR format: yyyy-MM-dd&apos;T&apos;HH:mm:ssZZ

	@param {String} date - The HL7 v2.x timestamp string
	@return {String} The converted FHIR timestamp string
*/
function convertToFhirTimestamp(date) {
	if (!date) {
		return &apos;&apos;;
	}

	var patterns = [
		&quot;yyyyMMddHHmmss.SSSZZ&quot;,
		&quot;yyyyMMddHHmmss.SSSZ&quot;,
		&quot;yyyyMMddHHmmss.SSS&quot;,
		&quot;yyyyMMddHHmmssZZ&quot;,
		&quot;yyyyMMddHHmmssZ&quot;,
		&quot;yyyyMMddHHmmss&quot;,
		&quot;yyyyMMddHHmm&quot;,
		&quot;yyyyMMddHH&quot;,
		&quot;yyyyMMdd&quot;
	];

	var instant;
	for each (pattern in patterns) {
		try {
			instant = org.joda.time.format.DateTimeFormat.forPattern(pattern).parseMillis(new String(date));
			break;
		} catch(e) {}
	}

	if (instant) {
		var outpattern = arguments.length &gt;= 2 ? arguments[1] : &quot;yyyy-MM-dd&apos;T&apos;HH:mm:ssZZ&quot;;
		try {
			return org.joda.time.format.DateTimeFormat.forPattern(outpattern).print(instant);
		} catch (e) {}
	}
	
	return date;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>760658e4-f24f-4a57-bbb9-9ae847f6daf8</id>
            <name>Convert Yes/No Indicator</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202737931</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Converts an HL7 v2.x yes/no indicator code to a boolean value. If the code is null or an empty string,
	false will be returned.

	@param {String} code - The HL7 yes/no indicator (Table 0136)
	@return {Boolean} True/false
*/
function convertYesNoIndicator(code) {
	return code == &apos;Y&apos;;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.5.2">
        <id>f1c01445-3686-43cb-a275-448e5108c378</id>
        <name>Library 1</name>
        <revision>2</revision>
        <lastModified>
          <time>1732283780106</time>
          <timezone>America/Santiago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>false</includeNewChannels>
        <enabledChannelIds>
          <string>ddd4fb6b-0232-4af2-b32d-9022674322a0</string>
          <string>e09edc63-b8bc-47a8-9b45-3f72a82347ab</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>258d2c56-dd69-4a6c-ac7e-88c949857427</string>
          <string>7b1ca6ce-6cd9-42a9-a9a0-4ce784ad33b2</string>
          <string>0ec7ab6e-f548-426a-99f6-18858cefc2d5</string>
          <string>27a3b726-9e18-4931-b370-96e4cc0b06fd</string>
          <string>472f9310-f575-4d60-b66a-97a0db44e4c2</string>
          <string>b16b0f5f-55a5-41b3-96c3-cbe40c8d8853</string>
          <string>cd829682-d3b1-45be-8a86-6b3f719d19e9</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="4.5.2">
            <id>90f1418a-4597-488b-a7cc-ff14fe7d800a</id>
            <name>0. obtener datos del paciente de mensajes HL7 v2.x</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202737818</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
 * Obtiene un objeto con los datos del paciente extraidos de un mensaje HL7 v2.x
 */
function get_patient_data(msg)
{
    var data = {};

    data.nacimiento = msg[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString();
    data.nombre = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;].toString();
    data.apellido = msg[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString();
    data.sexo = msg[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString();

    return data;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>64cff6b1-b015-4396-909b-d62c05a1114b</id>
            <name>1. mensaje es ADT?</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738621</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
 * Devuelve true si el mensaje es ADT, false si no. Se utilizar√° en filtros.
 */
function es_adt(msg)
{
   return msg[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;].toString() == &quot;ADT&quot;;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>2f2605a1-60a7-4eb3-997e-0130761b85c7</id>
            <name>bloque de codigo</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738159</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>DRAG_AND_DROP_CODE</type>
              <code>/**

log del identificador del mensaje HL7 v2.x

*/

logger.info( msg[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;].toString() );</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.5.2">
        <id>a2786191-1882-4a9b-ad7c-6231ace89fff</id>
        <name>LifeLabs</name>
        <revision>1</revision>
        <lastModified>
          <time>1732202737555</time>
          <timezone>America/Santiago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>c6c88de0-868f-494d-92f0-b443f3bb951a</string>
          <string>fb28e1f2-50cd-4335-90b6-1a7874f05e27</string>
          <string>f1b5c619-458b-4763-af8d-203f047d29b5</string>
          <string>c1f43ffe-ffe4-4ed8-a7b0-60c58e2a93be</string>
          <string>ca6fee9f-3abb-4890-8cd4-d608425918cd</string>
          <string>b55ec17a-1484-47f1-89d6-1899ffef34ac</string>
          <string>f2baf1f0-1807-4458-9bff-c17f51913f5e</string>
          <string>d361406f-6e08-4177-88b8-63cf3330f83a</string>
          <string>e5ba4449-b7cc-437f-8b2f-2dbac4e21af5</string>
          <string>adaba01b-d1e4-4cc5-9ae6-b9d26f470326</string>
          <string>629ab856-a95a-4dff-ae26-06c37689992d</string>
        </enabledChannelIds>
        <disabledChannelIds>
          <string>0dddfa28-f5e1-4197-a51c-e675e61c73d8</string>
          <string>c7c64a1c-aedb-452b-b113-b99eec540ef8</string>
          <string>2ef5b83f-6449-436c-823d-4372b736db77</string>
        </disabledChannelIds>
        <codeTemplates>
          <codeTemplate version="4.5.2">
            <id>ad798072-8dc2-4f88-ab3b-5dc8399b7217</id>
            <name>Convert HL7 Response to XML (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202737857</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Convert an HL7 to XML.

	@param {String} inORM - the hl7 as string
	@return {XML} return XML (HL7)
*/
function HL7toXML(inORM) {
	//
	//at this point we have a string not HL7 object. 
	//
	
	//
	//convert PIPE delimited string (HL7 ORM) to XML for easy parsing...
	//
	logger.debug(&quot;Converting to XML&quot;);
	var ORMtoXML = &quot;&quot;;	
	var serializationProperties = SerializerFactory.getDefaultSerializationProperties(&apos;HL7V2&apos;);
	serializationProperties.put(&apos;convertLineBreaks&apos;,true);
	serializationProperties.put(&apos;useStrictParser&apos;,false);
	serializationProperties.put(&apos;useStrictValidation&apos;,false);
	serializationProperties.put(&apos;stripNamespaces&apos;,false);
	serializationProperties.put(&apos;handleSubcomponents&apos;,true);
	serializationProperties.put(&apos;handleRepetitions&apos;,true);
	
	// Setting the default namespace is required when using the strict parser
	//default xml namespace = new Namespace(&apos;urn:hl7-org:v2xml&apos;);
	
	var ORMtoXML = SerializerFactory.getSerializer(&apos;HL7V2&apos;, serializationProperties, null).toXML(inORM);  
	var newXML = new XML(ORMtoXML);

	return newXML;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>14f51c2c-c40b-4870-a34c-795948ed07c1</id>
            <name>Create FHIR Diagnostic Order Bundle  (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738280</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Creates a FHIR Diagnostic resource for FHIR Bundle.
	
	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function CreateDiagnosticResource(inBundle, inHL7) 
{
	
	//create resource
	var DiagOrderRes 	= new Object();
	
	//create resourceType
	DiagOrderRes.resourceType = &quot;DiagnosticOrder&quot;;
     logger.debug(JSON.stringify(inBundle));
	if (inHL7[&apos;DG1&apos;][&apos;DG1.3&apos;][&apos;DG1.3.2&apos;].toString().trim() != &quot;&quot;)
	{
		//create extension object
		var objExtensions 		 = new Object();
		objExtensions.url		 = &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-subjectdiagnosis&quot;;
		objExtensions.valueString = inHL7[&apos;DG1&apos;][&apos;DG1.3&apos;][&apos;DG1.3.2&apos;];

		//add extension
		arrExtensions[arrExtensions.length] = objExtensions;
	}
	
	//create identifier array
	if (inHL7[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;].toString().trim() != &quot;&quot;)
	{
		var arrID = [];
		arrID[0]  = {&quot;system&quot;:&quot;intrlab&quot;, &quot;value&quot;:inHL7[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;]};
		DiagOrderRes.identifier = arrID;
	}
	
	//create extension array
	var arrExtensions = new Array();
		
        if (inHL7[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.1&apos;].toString().trim() != &quot;&quot;)
		{
			var frequency = { &quot;url&quot; : &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-standingorderfrequency&quot;,
			   			   &quot;valueString&quot; : inHL7[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.1&apos;]};
			arrExtensions.push(frequency);
			
			var startDate = { &quot;url&quot;: &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-standingorderstartdate&quot;,
			                  &quot;valueDateTime&quot; : inHL7[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.4&apos;]};
			arrExtensions.push(startDate);

			var expiryDate	 = { &quot;url&quot;: &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-standingorderexpirydate&quot;,
			                    &quot;valueDateTime&quot; : inHL7[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.5&apos;]};
			
			arrExtensions.push(expiryDate);
		
		}
                        
	//for each (obrField in inHL7[&apos;OBR&apos;])
	//{
		if (inHL7[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.4&apos;].toString().trim() != &quot;&quot;)
		{
			
			//create extension object
			var objExtensions 		 = new Object();
			objExtensions.url		 = &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-serviceDateTime&quot;;
			//TODO: Convert ServiceDate to ISO
			objExtensions.valueString = inHL7[&apos;OBR&apos;][&apos;OBR.27&apos;][0][&apos;OBR.27.4&apos;];
	
			//add extension
			arrExtensions.push(objExtensions);
		}
		//DiagOrderRes.extensions = arrExtensions;
	//}

	
   
	if (typeof(inHL7[&apos;ZBR&apos;][&apos;ZBR.17&apos;][0]) != &quot;undefined&quot; &amp;&amp; inHL7[&apos;ZBR&apos;][&apos;ZBR.17&apos;][0][&apos;ZBR.17.1&apos;].toString().trim() != &quot;&quot;)
	{
		
		//create extension object
		var objExtensions 		 = new Object();
		objExtensions.url		 = &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-supplementalLabels&quot;;
		objExtensions.valueString = inHL7[&apos;ZBR&apos;][&apos;ZBR.17&apos;][0][&apos;ZBR.17.1&apos;];
		//add extension
		arrExtensions[arrExtensions.length] = objExtensions;
	}
	
	if (typeof(inHL7[&apos;ZBR&apos;][&apos;ZBR.18&apos;][0]) != &quot;undefined&quot; &amp;&amp; inHL7[&apos;ZBR&apos;][&apos;ZBR.18&apos;][0][&apos;ZBR.18.1&apos;].toString().trim() != &quot;&quot;)
	{
		
		//create extension object
		var objExtensions 		 = new Object();
		objExtensions.url		 = &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-statInstructions&quot;;
		objExtensions.valueString = inHL7[&apos;ZBR&apos;][&apos;ZBR.18&apos;][0][&apos;ZBR.18.1&apos;];
		//add extension
		arrExtensions[arrExtensions.length] = objExtensions;
	}
					
	if (typeof(inHL7[&apos;ZBR&apos;][&apos;ZBR.19&apos;][0]) != &quot;undefined&quot; &amp;&amp; inHL7[&apos;ZBR&apos;][&apos;ZBR.19&apos;][0][&apos;ZBR.19.1&apos;].toString().trim() != &quot;&quot;)
	{
		
		//create extension object
		var objExtensions 		 = new Object();
		objExtensions.url		 = &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-statTransportMode&quot;;
		objExtensions.valueString = inHL7[&apos;ZBR&apos;][&apos;ZBR.19&apos;][0][&apos;ZBR.19.1&apos;];
		//add extension
		arrExtensions[arrExtensions.length] = objExtensions;
	}
	
	//for each (zbrField in inHL7[&apos;ZBR&apos;])
	//{
		if (typeof(inHL7[&apos;ZBR&apos;][&apos;ZBR.20&apos;][0]) != &quot;undefined&quot; &amp;&amp; inHL7[&apos;ZBR&apos;][&apos;ZBR.20&apos;][0][&apos;ZBR.20.1&apos;].toString().trim() != &quot;&quot;)
		{
			
			var objExtensions 		 = new Object();
			objExtensions.url		 = &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-statETA&quot;;
			//TODO: Convert? Bundle wants ex: 23:45 
			objExtensions.valueString = inHL7[&apos;ZBR&apos;][&apos;ZBR.20&apos;][0][&apos;ZBR.20.1&apos;];
	
			//add extension
			arrExtensions[arrExtensions.length] = objExtensions;
		}
	//}

	if (typeof(inHL7[&apos;ZBR&apos;][&apos;ZBR.21&apos;][0]) != &quot;undefined&quot; &amp;&amp; inHL7[&apos;ZBR&apos;][&apos;ZBR.21&apos;][0][&apos;ZBR.21.1&apos;].toString().trim() != &quot;&quot;)
	{
		//create extension object
		var objExtensions 		 = new Object();
		objExtensions.url		 = &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-statSpun&quot;;
		objExtensions.valueString = inHL7[&apos;ZBR&apos;][&apos;ZBR.21&apos;][0][&apos;ZBR.21.1&apos;];
		//add extension
		arrExtensions[arrExtensions.length] = objExtensions;
	}

	if (inHL7[&apos;PV1&apos;][&apos;PV1.50&apos;][&apos;PV1.50.1&apos;].toString().trim() != &quot;&quot;)
	{
		//create extension object
		var objExtensions 		 = new Object();
		objExtensions.url		 = &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-chartNumberClientInfo&quot;;
		objExtensions.valueString = inHL7[&apos;PV1&apos;][&apos;PV1.50&apos;][&apos;PV1.50.1&apos;];

		//add extension
		arrExtensions[arrExtensions.length] = objExtensions;
	}

	if (inHL7[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;].toString().trim() != &quot;&quot;)
	{
		//create extension object
		var objExtensions 		 = new Object();
		objExtensions.url		 = &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-collectionDateTime&quot;;
		//TODO: Convert ServiceDate to ISO ex:  20160319100000-0700
		objExtensions.valueString = inHL7[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;];

		//add extension
		arrExtensions[arrExtensions.length] = objExtensions;
	}

	//default level accession level claim id
	if (inHL7[&apos;ZBR&apos;][&apos;ZBR.13&apos;][&apos;ZBR.13.1&apos;].toString().trim() != &quot;&quot;)
	{
		//create extension object
		var objExtensions 		 = new Object();
		objExtensions.url		 = &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-payertype&quot;;
		objExtensions.valueString = inHL7[&apos;ZBR&apos;][&apos;ZBR.13&apos;][&apos;ZBR.13.1&apos;]; //no translation needed. correct code to gui

		//add extension
		//arrExtensions[arrExtensions.length] = objExtensions;
	}

	//any tests? if so...
	//create item array
	if (inHL7[&apos;ORC&apos;].length() &gt; 0)
	{
		var arrItem = new Array();
		var cntLoop = 0;

		for each(obrSeg in inHL7[&apos;OBR&apos;])
		{
			//main object
			var objMain =  new Object();
			//put main object in item array
			arrItem [cntLoop] = objMain ;
			
			//EXTENSION
			var arrExtension = new Array();

			//logger.debug(&quot;========= Get Accession OBR-Level Notes=====&quot;);
			//logger.debug(&quot;Get all NTEs after the first OBR segment. stop at blg: &quot; +  
			
			var segsNTEs = getSegmentsAfter(inHL7,obrSeg,&apos;NTE&apos;,false, [&apos;BLG&apos;]);
			//logger.debug(&quot;Get all NTEs after the first OBR segment. stop at blg: &quot; + segsNTEs);
				
			for each (nteSeg in segsNTEs) 
			{
				//eliminate single and double quotes
				//nteSeg.toString().replace(/\&quot;/g, &quot;\\\&quot;&quot;)

				//logger.debug(&quot;nteSeg 3.1: &quot; + nteSeg[&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] );
				//logger.debug(&quot;nteSeg 4.1: &quot; + nteSeg[&apos;NTE.4&apos;][&apos;NTE.4.1&apos;]);
		
				//create valueAnnotation
				var valueAnnotation = new Object();

				//create extension array
				var valueExtension = new Array();
				valueExtension.push({&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/timestamp&quot;, &quot;valueString&quot;:&quot;&quot;});				
				valueExtension.push({&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/NoteType&quot;, &quot;valueCode&quot;:nteSeg[&apos;NTE.4&apos;][&apos;NTE.4.1&apos;]});

				var segZNT = getSegmentsAfter(inHL7,nteSeg,&apos;ZNT&apos;,false, [&apos;NTE&apos;]);
				if (typeof(segZNT[0][&apos;ZNT.4&apos;]) != &quot;undefined&quot;  ){		
			        valueExtension.push({&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/CannedComment&quot;, &quot;valueCode&quot;:segZNT[0][&apos;ZNT.4&apos;][&apos;ZNT.4.1&apos;]});
			     }
				//create time - not used yet
				//var valueTime = &quot;&quot;;

				//create text
				var valueText = nteSeg[&apos;NTE.3&apos;][&apos;NTE.3.1&apos;]; 
				//FIXME: could be double quote here...parsing below removes backslash. (ex: &quot;Sent )
				
				//build authorReference
				var authorReference = {};
				authorReference.reference = &quot;person/id&quot;;
				authorReference.display = &quot;User that made the note&quot;;

				//populate valueAnnotation with order level notes
				valueAnnotation.extension = valueExtension;
				valueAnnotation.authorReference = authorReference;
				//valueAnnotation.time = valueTime;
				valueAnnotation.text = valueText;
				
				//
				//create test note item extension
				arrExtension[arrExtension.length] = {&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/Note&quot;,&quot;valueAnnotation&quot;:valueAnnotation};

				//logger.debug(&quot;Test Note extension: &quot; + JSON.stringify(arrExtension));
			}
			//logger.debug(&quot;========END of Get Accession OBR-Level Notes======&quot;);
			
			if (obrSeg[&apos;OBR.23&apos;][&apos;OBR.23.1&apos;].toString().trim() != &quot;&quot;)
			{
				arrExtension[arrExtension.length] = {&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-item-payertype&quot;,&quot;valueString&quot;:obrSeg[&apos;OBR.23&apos;][&apos;OBR.23.1&apos;]};
			}
			
			//put extension in main object
			objMain.extension = arrExtension;
			
			//codes in OBR.4
			if (obrSeg[&apos;OBR.4&apos;].toString().trim() != &quot;&quot;)
			{
				//CODE
				var objCode = new Object();
				var arrCodeCoding 		= new Array();
				arrCodeCoding[0] 		= {&quot;system&quot;:&quot;Intrlab&quot;,&quot;code&quot;:&quot;&quot;};
				
				//get non-profile tests
				if (obrSeg[&apos;OBR.4&apos;][&apos;OBR.4.1&apos;].toString().trim() != &quot;&quot;)
				{	
					arrCodeCoding[0].code = obrSeg[&apos;OBR.4&apos;][&apos;OBR.4.1&apos;];//test code ex:27156
				}
	
				if (obrSeg[&apos;OBR.4&apos;][&apos;OBR.4.2&apos;].toString().trim() != &quot;&quot;)
				{
					objCode.text = obrSeg[&apos;OBR.4&apos;][&apos;OBR.4.2&apos;];
				}
	
				
				if (obrSeg[&apos;OBR.4&apos;][&apos;OBR.4.3&apos;].toString().trim() != &quot;&quot;)
				{
					var arrCodeExtension 	= new Array();
					arrCodeExtension[0] 	= {&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-item-code-mnemonic&quot;,&quot;valueString&quot;:obrSeg[&apos;OBR.4&apos;][&apos;OBR.4.3&apos;]};
					objCode.coding 		=  arrCodeCoding ;
					objCode.extension 		= arrCodeExtension;
		
					//arrCodeExtension[0].valueString = obrSeg[&apos;OBR.4&apos;][&apos;OBR.4.3&apos;];//mnemonic ex: NA
				}

			
				//put code in main object
				objMain.code = objCode;
			
			} //end of code/obr.4

			logger.debug(&quot;OBR.27.6 : &quot; +  obrSeg[&apos;OBR.27&apos;][&apos;OBR.27.6&apos;]);
			
			//create  diagnosticorder-item-priority extension
			if (obrSeg[&apos;OBR.27&apos;][&apos;OBR.27.6&apos;].toString().trim() != &quot;&quot;)
			{
				arrExtension = GetFHIRItemTestPriority(obrSeg[&apos;OBR.27&apos;][&apos;OBR.27.6&apos;], arrExtension);
			}

			//create eorder-item-contactpoint - only skip if &apos;OBR.27.6 = routine
			if (obrSeg[&apos;OBR.27&apos;][&apos;OBR.27.6&apos;].toString().trim().toUpperCase() != &quot;R&quot;)
			{
				//create eorder-item-contactpoint - only skip if &apos;OBR.27.6 = routine
				var zbrSeg = getSegmentsAfter(inHL7,obrSeg,&apos;ZBR&apos;,false, [&apos;BLG&apos;]);
				logger.debug(&quot;zbrSeg after OBR: &quot; +  zbrSeg[0]);
				if (typeof(zbrSeg[0][&apos;ZNT.16&apos;]) != &quot;undefined&quot;)
				{
					arrExtension = GetFHIRItemTestContactPoint(zbrSeg[0], arrExtension);
				}
				
			}
			
			cntLoop++;
		}

		
		
		DiagOrderRes.item = arrItem;

	
	} //end of ORC 
	
	//add extensions
	DiagOrderRes.extension = arrExtensions;
logger.debug(JSON.stringify(inBundle));
	var FhirResourceUUID = inBundle[&apos;entry&apos;].getByResourceType(&quot;Patient&quot;);
	//create subject object - patient UUID 
	if (FhirResourceUUID)
	{
		var objSubject       = new Object();
		objSubject.reference =  FhirResourceUUID.fullUrl;
		DiagOrderRes.subject = objSubject;
	}
	
	//create order object
	FhirResourceUUID = inBundle[&apos;entry&apos;].getByResourceType(&quot;Practitioner&quot;);
	if (FhirResourceUUID)
	{
		var objOrderer 	 = new Object();
		objOrderer.reference = FhirResourceUUID.fullUrl;
		DiagOrderRes.orderer = objOrderer ;
	}
	
	//create encounter object
	FhirResourceUUID = inBundle[&apos;entry&apos;].getByResourceType(&quot;Encounter&quot;);
	if (FhirResourceUUID)
	{
		var objEncounter 	    = new Object();
		objEncounter.reference  = FhirResourceUUID.fullUrl;
		DiagOrderRes.encounter  = objEncounter;
	}

	//priority string
	if (inHL7[&apos;ZBR&apos;][&apos;ZBR.14&apos;][&apos;ZBR.14.1&apos;].toString().trim() != &quot;&quot;)
	{
		DiagOrderRes.priority =  GetFHIRTestPriority(inHL7[&apos;ZBR&apos;][&apos;ZBR.14&apos;][&apos;ZBR.14.1&apos;]);
	}
	else
	{
		DiagOrderRes.priority = GetFHIRTestPriority(&quot;R&quot;);
	}

	//
	//Get Accession PID-Level Notes create note array
	//
	{
	var pidNTEs = getSegmentsAfter(inHL7,inHL7[&apos;PID&apos;],&apos;NTE&apos;,false, [&apos;PV1&apos;]);
	var arrNote = new Array();
	
	for each (notePid in pidNTEs)
	{
		//logger.debug(&quot;.......PID NTES...&quot; +  JSON.stringify(notePid));
		
		//create valueAnnotation
		var valueAnnotation = new Object();

		//create extension array
		var valueExtension = new Array();
		valueExtension.push({&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/timestamp&quot;, &quot;valueString&quot;:&quot;&quot;});
		valueExtension.push({&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/NoteType&quot;, &quot;valueCode&quot;:notePid[&apos;NTE.4&apos;][&apos;NTE.4.1&apos;]});

		var segZNT = getSegmentsAfter(inHL7,notePid,&apos;ZNT&apos;,false, [&apos;NTE&apos;]);
		logger.debug(&quot;supposed to be ZNT:&quot; + segZNT);
		if (typeof(segZNT[0][&apos;ZNT.4&apos;]) != &quot;undefined&quot;  ){
			logger.debug(&quot;adding ZNT:&quot; + segZNT[0][&apos;ZNT.4&apos;][&apos;ZNT.4.1&apos;]);
			valueExtension.push({&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/CannedComment&quot;, &quot;valueCode&quot;:segZNT[0][&apos;ZNT.4&apos;][&apos;ZNT.4.1&apos;]});
		}

		//create time
		var valueTime = &quot;&quot;;

		//create text
		var valueText = notePid[&apos;NTE.3&apos;][&apos;NTE.3.1&apos;]; 
		logger.debug(notePid[&apos;NTE.1&apos;] +&quot;:&quot; + valueText);
		//FIXME: could be double quote here...parsing below removes backslash. (ex: &quot;Sent )
		
		//build authorReference
		var authorReference = {};
		authorReference.reference = &quot;person/id&quot;;
		authorReference.display = &quot;User that made the note&quot;;

		//populate valueAnnotation with order level notes
		valueAnnotation.extension = valueExtension;
		valueAnnotation.authorReference = authorReference;
		valueAnnotation.time = valueTime;
		valueAnnotation.text = valueText;
		
		//
		//create test note item extension
		arrNote[arrNote.length] = valueAnnotation;

	}
	
		DiagOrderRes.note = arrNote;

	} //end of note array creation
	
	
	//return object with data?
	if (!isObjectEmpty(DiagOrderRes))
	{
		var DiagnosticResource = { &quot;resource&quot; : DiagOrderRes };	
		logger.debug(&quot;Diagnostic Order NEW: &quot; + JSON.stringify(DiagnosticResource));
		return DiagnosticResource;
	}
	else
	{
		return undefined;
	}
	
	
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>95304e0a-c089-42fe-9316-a192a552041c</id>
            <name>Create FHIR Encounter Resource (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738064</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Creates a FHIR Encounter resource for LifeLabs.

	@param {json} inBundle - outbound message template (json)
	@param {Any} inHL7 - HL7 response from IntRLab
	@return {json} return Location resource or undefined if no data. 
*/
function CreateEncounterResource(inBundle, inHL7) 
{
	
	//create resource
	var EncounterRes 	  = new Object();

	//resource not used yet
/*	if (inHL7[&apos;seg&apos;].toString().trim() != &quot;&quot;)
	{
		//create resource
		var EncounterRes = new Object();
		
		//create resourceType
		EncounterRes.resourceType = &quot;Encounter&quot;;
		
		//create location item inside location array
		var locationItem = new Object();
		locationItem.reference = &quot;here&quot;;
		
		//create extension array
		EncounterRes.location = [
			{&quot;location&quot;: locationItem }
		];
	}

*/		
	
	if (!isObjectEmpty(EncounterRes))
	{
		var EncounterRes = &quot;{ \&quot;resource\&quot; &quot; + &quot;:&quot; + JSON.stringify(EncounterRes) + &quot;}&quot;;
		return JSON.parse(EncounterRes);
			
	}else
	{
		return undefined;
	}

	
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>aeeeb57d-5142-4aea-ad45-37b93631d10f</id>
            <name>Create FHIR from HL7 (ORM) (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738468</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	LifeLabs function to create FHIR from HL7.

	@param {Any} inFHIR - 
	@param {Any} inHL7 - 
	@return {String} return description
*/
function CreateFHIRfromHL7(inFHIR, inHL7)
{
	logger.debug(&quot;in CreateFHIRfromHL7. inFHIR: &quot; + JSON.stringify(inFHIR));
	//logger.debug(&quot;in CreateFHIRfromHL7. inHL7: &quot; + SerializerFactory.getSerializer(&apos;HL7V2&apos;).fromXML(inHL7));

	//resources used in this bundle
	var PatientRes 		= new Array();
	var PractitionerRes 	= new Array();
	var EncounterRes		= new Array();
	var LocationRes		= new Array();
	var DiagnosticOrderRes	= new Array();

	//uuids
	var PatientUUID 		= UUIDGenerator.getUUID();
	var PractitionerUUID 	= UUIDGenerator.getUUID();
	var LocationUUID 		= UUIDGenerator.getUUID();
	var DiagnosticOrderUUID  = UUIDGenerator.getUUID();

	//count for total tests in hl7
	var cntTests			= inHL7[&apos;ORC&apos;].length();
	
	try
	{
		
	//
	//Create Patient Resource
	//
	logger.debug(&quot;CreateFHIRfromHL7.CreatePatientResourceForBundle&quot;);
	PatientRes = CreatePatientResourceForBundle(inFHIR, inHL7);
	if (PatientRes != undefined)
	{
		logger.debug(&quot;Returned Patient Resource:&quot; + JSON.stringify(PatientRes));
		inFHIR = SetResourceInBundle(inFHIR, PatientRes, PatientUUID);
	}

	//
	//Create Location Resource
	//
	logger.debug(&quot;CreateFHIRfromHL7.CreateLocationResource&quot;);
	LocationRes = CreateLocationResource(inFHIR, inHL7);
	if (LocationRes != undefined)
	{
		inFHIR = SetResourceInBundle(inFHIR, LocationRes, LocationUUID);
	}

	//
	//Create Encounter Resource
	//
	logger.debug(&quot;CreateFHIRfromHL7.CreateEncounterResource&quot;);
	EncounterRes = CreateEncounterResource(inFHIR, inHL7);
	if (EncounterRes != undefined)
	{
		inFHIR = SetResourceInBundle(inFHIR, EncounterRes, &quot;ENCOUNTER&quot;);
	}

	//
	//Create Practitioner Resource
	//
	logger.debug(&quot;CreateFHIRfromHL7.CreatePractitionerResource&quot;);
	PractitionerRes = CreatePractitionerResource(inFHIR, inHL7);
	if (PractitionerRes != undefined)
	{
		inFHIR = SetResourceInBundle(inFHIR, PractitionerRes, PractitionerUUID);
	}
	
	//
	//Create DiagnosticOrder Resource
	//
	logger.debug(&quot;CreateFHIRfromHL7.CreateDiagnosticResource&quot;);
	var DiagnosticOrderRes = CreateDiagnosticResource(inFHIR, inHL7);
	if (DiagnosticOrderRes != undefined)
	{
		logger.debug(&quot;Returned Diagnostic Order:&quot; + JSON.stringify(DiagnosticOrderRes));
		inFHIR = SetResourceInBundle(inFHIR, DiagnosticOrderRes, DiagnosticOrderUUID);
	}
	


	logger.debug(&quot;In  CreateFHIRfromHL7...returning new FHIR Bundle: &quot; + JSON.stringify(inFHIR));
	}
	catch(err)
	{
		logger.error(&quot;In CreateFHIRfromHL7 Code Template: &quot; + err);
		throw err;
	}
	
	return  inFHIR;
	
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>3aae5379-47e3-4dde-be77-889f51611b32</id>
            <name>Create FHIR Location Resource (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202737652</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Creates a FHIR Location resource for LifeLabs.

	@param {json} inBundle - outbound message template (json)
	@param {Any} inHL7 - HL7 response from IntRLab
	@return {json,boolean} return Location resource or false no data message. 
*/
function CreateLocationResource(inBundle, inHL7) 
{
	//logger.debug(&quot;In  CreateLocationResource&quot;);
	
	//create resource
	var LocationResource 	  = new Object();
	
	if (inHL7[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;].toString().trim() != &quot;&quot;)
	{	
		//create resourceType
		LocationResource.resourceType = &quot;Location&quot;;
	
		//create identifier array
		LocationResource.identifier = [{&quot;value&quot;: &quot;&quot;}];
		LocationResource.identifier[0].value = inHL7[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;];
		
	}

	//not using yet
	/*if (inHL7[&apos;segment&apos;].toString().trim() != &quot;&quot;)
	{
		//create extension array
		LocationRes.extension = [
			{&quot;url&quot;: &quot;&quot;},
			{&quot;valueString&quot;: &quot;&quot;}
		];

		//populate exension
		LocationRes.extension[0].url = &quot;https://api.excelleris.com/1.0/eorder/location-group&quot;;
		LocationRes.extension[0].valueString = inHL7[&apos;PV1&apos;][&apos;PV1.3&apos;];
	}*/

	if (!isObjectEmpty(LocationResource))
	{
		var LocationResource = &quot;{ \&quot;resource\&quot; &quot; + &quot;:&quot; + JSON.stringify(LocationResource) + &quot;}&quot;;
		//logger.debug(&quot;Encounter NEW: &quot; + JSON.stringify(JSON.parse(LocationResource)));	
		return JSON.parse(LocationResource);
	}
	else
	{
		return undefined;
	}
	
}


</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>4efc6e65-3821-4ab2-bf97-7e639eedab7e</id>
            <name>Create FHIR Order Bundle  (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738894</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {xml} xml - xml version of the hl7 response from IntRLab
	@param {json} tmp - outbound message template (json)
	@return {String}  - updated Stringified JSON object
*/
// Changes XML to JSON
//xml = xml version of the hl7 response from IntRLab
//tmp = outbound message template (json)

function CreateFHIRBundle(xml, tmp) 
{

try
{
	//logger.info(&quot;xmlToJson...&quot;);
	//tmp = AddNewOrderResourceToFHIRBundle(tmp, 4);
	//return;
	
	//1. Is this single ORM or multiple?
	var isMultiORM = HasMultipleORMsMessages(xml);
	//logger.info(&quot;Do We Have Multiple ORMs? : &quot; + isMultiORM) ;
	//logger.info(&quot;Full HL7 XML: &quot; + xml);
	
	//
	//2. Get HL7s individually...
	//
	var lXML = xml;
	//if I don&apos;t remove now - it will cause issues later.
	lXML = lXML.toString().replace(&quot;&lt;/HL7Message&gt;&quot;,&quot;&quot;);
	var arrHL7 = lXML.toString().split(&quot;&lt;MSH&gt;&quot;);

	//set counters
	var hl7Count = arrHL7.length - 1;
	var ormCount = hl7Count - 1;
	var loop = 0;

	//counts are always correct.
	logger.info(&quot;HL7 message count: &quot; + hl7Count);
	logger.info(&quot;ORM message count: &quot; + ormCount);

	//in the mirth JSON template, we add new order entries to template at position 3 or tmp[&apos;entry&apos;][3]
	var orderCountEntryPos = 2;
	
	//
	//loop through entire IntRLab response
	//
	for each (hl7Msg in arrHL7)
	{
		if (loop == 1)
		{
			//loop 1 is the main MSH that holds ORMs
			//logger.info(&quot;MAIN MSH holding ORMs: &quot; + hl7Msg.toString());	
		} 
		else if (loop &gt;= 2)
		{
			//
			//loop 2 and greater are all the ORM messages
			//
			
			//
			//this is the individual ORM (hl7Msg.toString)
			//
			
			//we split earlier above, so put tags back in to make this a valid XML
			var curHL7Msg = &quot;&lt;HL7Msg&gt;&lt;MSH&gt;&quot; + hl7Msg.toString() + &quot;&lt;/HL7Msg&gt;&quot;; //valid XML
			//logger.info(&quot;CURRENT ORM IN LOOP&quot; + curHL7Msg);
			
			//
			//this is the new individual ORM as XML format (curHL7.toString())
			//
			var curHL7 = new XML(curHL7Msg);

			//
			//is this multiple ORMs
			//

			if (isMultiORM)
			{
				//
				//add order resources to template (at position 3 [3])
				//
				//orderCountEntryPos++;
			}

			//logger.info(&quot;orderCountEntryPos: &quot; + orderCountEntryPos);
			//logger.info(&quot;ormCount: &quot; + ormCount);
			
	 		//should we clean up order bundle template?
	 		if (orderCountEntryPos &gt; ormCount)
	 		{
	 			//logger.info(&quot;FOUND the last ORDER!&quot;);
	 			//logger.info(&quot;creating patient resource for bundle&quot;);
				tmp[&apos;entry&apos;][0][&apos;resource&apos;] =  CreatePatientResource(curHL7, tmp[&apos;entry&apos;][0][&apos;resource&apos;], true, true);
	 		}
	 		else
	 		{
	 			//logger.info(&quot;creating patient resource for bundle&quot;);
				//clean up order bundle template
				tmp[&apos;entry&apos;][0][&apos;resource&apos;] =  CreatePatientResource(curHL7, tmp[&apos;entry&apos;][0][&apos;resource&apos;], true, false);
	 		}
			
			logger.info(&quot;creating practitioner resource for bundle&quot;);
			tmp = CreatePractitionerResource(tmp, curHL7);

			//Order FHIR resource are multiple resources
			//
			//Create Diagnostic Order for bundle
			//

			//loop through ORM message and create order resource...
			tmp = CreateOrderResource(curHL7, ormCount, orderCountEntryPos, tmp);
			orderCountEntryPos++;
		}
		loop++;
	}
	return JSON.stringify(tmp);
	
}
catch(err)
{
	logger.error(&quot;Error in xmlToJson(): &quot; + err.message);
	//throw err;
}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>b568ef31-186b-46f2-9606-4f336275478d</id>
            <name>Create FHIR Order Resource  (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738519</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {Any} curHL7 - An individual HL7 ORM from IntRLab response.
	@param {Any} ormCount - The total number of HL7 ORMs in the IntRlab response.
	@param {Any} orderCountEntryPos - the array position to put the new order resource (starts at position #2).
	@param {Any} inTmp - JSON template.
	@return {String} return description
*/
//For Order Bunlde, the Order data is in entry[2], entry[3], etc (depending on how many ORMs returned)
//ORC, OBR, ZBR are required - they make up IntRlab ORM message

//curHL7 = An individual HL7 ORM from IntRLab response.
//ormCount =  The total number of HL7 ORMs in the IntRlab response.
//orderCountEntryPos = the array position to put the new order resource (starts at position #2).
//inTmp =  json template.
function CreateOrderResource(curHL7, ormCount, orderCountEntryPos, inTmp)
{	
	//logger.info(&quot;--------BEG CreateOrderResource----------&quot;);

	//
	//TEST RESULT: ORC, OBR, OBX,  ZBX
	//
	//ORC.4 - Order ID/Report ID
	//OBR.2 - Test Request ID
	//OBX.3 - Test Result Code
	//OBX.4 - Observervaion SUB-ID
	//ZBX.1 - Test Result Release Date/Time
	
	//set the OBR segment counter
	var obrCount = 1;

	//loop through ORM message and find segments...
	for each (itemSeg in curHL7.children())
	{
		
		//logger.info(&quot;BEG LOOP: orderCountEntryPos: &quot; + orderCountEntryPos);
		//logger.info(&quot;BEG LOOP: group: &quot; + group);
		//create order resource...
		var curSegment = new XML(itemSeg);

		
		//logger.info(&quot;Create Order Resource in entry[&quot; + orderCountEntryPos + &quot;]&quot;);

		//make sure there&apos;s an entry in the template for the order resource
		if (orderCountEntryPos &gt;= 3)
		{
			//logger.info(&quot;Add entry[] to template in pos: &quot; + orderCountEntryPos);
			//will have ORC, OBR, ZBR
			if (curSegment.toString().indexOf(&quot;&lt;OBR&gt;&quot;) &gt; -1)
			{
				inTmp = AddNewOrderResourceToFHIRBundle(inTmp, orderCountEntryPos, curSegment, curHL7);
			}
		}
		else
		{
		//Is OBR?
		if (curSegment.toString().indexOf(&quot;&lt;OBR&gt;&quot;) &gt; -1)
		{
			var itemSeg = new XML(curSegment);
			//logger.info(&quot;FOUND OBR segment itemSeg: &quot; + itemSeg);

					//
					//A test request in IntRLab consists of an ORC-OBR-ZBR segment sequence
					//
					//if (orderCountEntryPos &lt;= ormCount)
					//{    
						
						
							//always one patient resource
							inTmp[&apos;entry&apos;][orderCountEntryPos][&apos;resource&apos;][&apos;subject&apos;][&apos;reference&apos;] = &quot;Patient/&quot;+curHL7[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;];
							inTmp[&apos;entry&apos;][orderCountEntryPos][&apos;resource&apos;][&apos;subject&apos;][&apos;display&apos;]   = curHL7[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;];
		
							//build fullurl
							inTmp[&apos;entry&apos;][orderCountEntryPos][&apos;fullUrl&apos;] = &quot;/diagnosticorder/&quot;+itemSeg[&apos;OBR.2&apos;][&apos;OBR.2.1&apos;]
						
							
							//ORDERING PRACTITIONER ADDRESS IS ORC.24
							//ORC|NW|||20060810.000001^^2.16.840.1.113883.3.59.3:9999^ISO|||||20060810145200‚Äë0400||||||||||||Anytown¬†General¬†Hospital^^^^^&amp;2.16.840.1.113883.3.59.3:9999&amp;ISO|123¬†Main¬†Street^^Anytown^ON^M5W¬†1E6^CAN^B||500 Main Street^3rd floor^Anytown^ON^M5W 5E5^CAN^B&lt;CR&gt; 
							
							//ORC-12 / OBR-16 / RXO-14 / RXE-13 / PRT-5 (PRT-4-Participation=&apos;OP&apos;)
							inTmp[&apos;entry&apos;][orderCountEntryPos][&apos;resource&apos;][&apos;orderer&apos;][&apos;reference&apos;] = &quot;Practitioner/&quot;+itemSeg[&apos;OBR.16&apos;][&apos;OBR.16.1&apos;];
							//
							//each OBR goes into an item...
							//
							inTmp[&apos;entry&apos;][orderCountEntryPos][&apos;resource&apos;][&apos;item&apos;][0][&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;] = itemSeg[&apos;OBR.4&apos;][&apos;OBR.4.1&apos;];
							//test request code - OBR 4.1
							//test request desc - OBR 4.2
							//test request type - OBR 4.3 (table 9901 olis test request nomenclature)
							inTmp[&apos;entry&apos;][orderCountEntryPos][&apos;resource&apos;][&apos;item&apos;][0][&apos;extension&apos;][0][&apos;url&apos;] = &quot;diagnosticorder-item-testrequestcode&quot;;
							inTmp[&apos;entry&apos;][orderCountEntryPos][&apos;resource&apos;][&apos;item&apos;][0][&apos;extension&apos;][0][&apos;valueCodeableConcept&apos;][&apos;coding&apos;][0][&apos;code&apos;] = itemSeg[&apos;OBR.4&apos;][&apos;OBR.4.1&apos;];
							inTmp[&apos;entry&apos;][orderCountEntryPos][&apos;resource&apos;][&apos;item&apos;][0][&apos;extension&apos;][1][&apos;url&apos;] = &quot;diagnosticorder-item-testrequestdesc&quot;
							inTmp[&apos;entry&apos;][orderCountEntryPos][&apos;resource&apos;][&apos;item&apos;][0][&apos;extension&apos;][1][&apos;valueString&apos;] = itemSeg[&apos;OBR.4&apos;][&apos;OBR.4.2&apos;];
							inTmp[&apos;entry&apos;][orderCountEntryPos][&apos;resource&apos;][&apos;item&apos;][0][&apos;extension&apos;][2][&apos;url&apos;] = &quot;diagnosticorder-item-testrequestcodetype&quot;;
							inTmp[&apos;entry&apos;][orderCountEntryPos][&apos;resource&apos;][&apos;item&apos;][0][&apos;extension&apos;][2][&apos;valueString&apos;] = itemSeg[&apos;OBR.4&apos;][&apos;OBR.4.3&apos;];
							//item comment [3]
							inTmp[&apos;entry&apos;][orderCountEntryPos][&apos;resource&apos;][&apos;item&apos;][0][&apos;extension&apos;][3][&apos;valueString&apos;] = &quot;This is and item comment for &quot; + itemSeg[&apos;OBR.4&apos;][&apos;OBR.4.1&apos;] + &quot; &quot; + itemSeg[&apos;OBR.4&apos;][&apos;OBR.4.2&apos;];
							
						
						obrCount++;	
					//}
				}
		}
	}

	//logger.info(&quot;OBRCOUNT: &quot; + obrCount);

	//logger.info(&quot;--------END CreateOrderResource----------&quot;);
	
	return inTmp;
}

//
function AddNewOrderResourceToFHIRBundle(inJson, inEntryArrayPos, curSeg, curHL7)
{
	//var inJsonString = JSON.stringify(inJson);
	//var inJsonObj    = JSON.parse(inJsonString);
	var inJsonObj    = inJson;
	
	//build ORDER with json	
	inJsonObj.entry[inEntryArrayPos] = {};
	inJsonObj.entry[inEntryArrayPos].fullUrl = &quot;diagnosticorder/&quot;+curSeg[&apos;OBR.2&apos;][&apos;OBR.2.1&apos;];
	
	//build resource object
	inJsonObj.entry[inEntryArrayPos].resource = {};
	inJsonObj.entry[inEntryArrayPos].resource.resourceType = &quot;DiagnosticOrder&quot;;
	inJsonObj.entry[inEntryArrayPos].resource.id = curSeg[&apos;OBR.2&apos;][&apos;OBR.2.1&apos;];
	
	//build extension object under resource
	inJsonObj.entry[inEntryArrayPos].resource.extension = {};
	
	//build subject object under resource
	inJsonObj.entry[inEntryArrayPos].resource.subject = {};
	inJsonObj.entry[inEntryArrayPos].resource.subject.reference = &quot;Patient/&quot;+curHL7[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;];
	inJsonObj.entry[inEntryArrayPos].resource.subject.display   = curHL7[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;]; 
	
	//build orderer object under resource
	inJsonObj.entry[inEntryArrayPos].resource.orderer = {};
	inJsonObj.entry[inEntryArrayPos].resource.orderer.reference = &quot;Practitioner/&quot;+curSeg[&apos;OBR.16&apos;][&apos;OBR.16.1&apos;];
	
	inJsonObj.entry[inEntryArrayPos].resource.status = &quot;requested&quot;;
	inJsonObj.entry[inEntryArrayPos].resource.priority = &quot;routine&quot;;
	
	//build item object under resource
	inJsonObj.entry[inEntryArrayPos].resource.item = [ {}, {} ];
	inJsonObj.entry[inEntryArrayPos].resource.item[0].extension = {};
	inJsonObj.entry[inEntryArrayPos].resource.item[1].extension = {};
	
	//build note under resource
	inJsonObj.entry[inEntryArrayPos].resource.note = [ {} ];
	inJsonObj.entry[inEntryArrayPos].resource.note[0].text = &quot;This is my Diagnostic Order note for a new order at array position: &quot; +inEntryArrayPos;

	return inJsonObj;
}


/*function CleanUpTemplate(inJson)
{
	var resourceXML = FhirUtil.jsonToXML(inJson);
	logger.info(&quot;turned template to XML: &quot; + resourceXML);
}*/</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>65f08439-8df3-4a8c-bdc5-a3c11f5fa187</id>
            <name>Create FHIR Patient Resource  (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738230</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Creates a FHIR patient resource or XML to JSON.

	@param {xml} xml - xml version of the hl7 response from IntRLab
	@param {json} tmp - outbound message template (json)
	@param {boolean} isBundle - True/False - is this a FHIR Bundle?
	@param {boolean} isLastOrder - True/False - is this the last order in the FHIR Bundle?
	@return {json} FHIR Patient Resource
*/
// Changes XML to JSON
//xml = xml version of the hl7 response from IntRLab
//tmp = outbound message template (json)
function CreatePatientResource(xml, tmp, isBundle, isLastOrder) 
{
	// populate tmp
	logger.info(&quot;In code template.  CreatePatientResource xml: &quot; + xml);
	logger.info(&quot;In code template.  CreatePatientResource tmp: &quot; + JSON.stringify(tmp));
	
	//build text
	tmp[&apos;text&apos;][&apos;status&apos;] = &quot;generated&quot;;
	tmp[&apos;text&apos;][&apos;div&apos;] = &quot;&lt;div&gt;&lt;p&gt;&lt;b&gt;Generated Narrative with Details&lt;/b&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;id&lt;/b&gt;: f201&lt;/p&gt;&lt;p&gt;&lt;b&gt;identifier&lt;/b&gt;: BSN = 123456789 (OFFICIAL), BSN = 123456789 (OFFICIAL)&lt;/p&gt;&lt;p&gt;&lt;b&gt;active&lt;/b&gt;: true&lt;/p&gt;&lt;p&gt;&lt;b&gt;name&lt;/b&gt;: Roel(OFFICIAL)&lt;/p&gt;&lt;p&gt;&lt;b&gt;telecom&lt;/b&gt;: ph: +31612345678(MOBILE), ph: +31201234567(HOME)&lt;/p&gt;&lt;p&gt;&lt;b&gt;gender&lt;/b&gt;: male&lt;/p&gt;&lt;p&gt;&lt;b&gt;birthDate&lt;/b&gt;: 13/03/1960&lt;/p&gt;&lt;p&gt;&lt;b&gt;deceased&lt;/b&gt;: false&lt;/p&gt;&lt;p&gt;&lt;b&gt;address&lt;/b&gt;: Bos en Lommerplein 280 Amsterdam 1055RW NLD (HOME)&lt;/p&gt;&lt;p&gt;&lt;b&gt;maritalStatus&lt;/b&gt;: Legally married &lt;span&gt;(Details : {SNOMED CT code &apos;36629006&apos; = &apos;36629006&apos;, given as &apos;Legally married&apos;}; {http://hl7.org/fhir/v3/MaritalStatus code &apos;M&apos; = &apos;Married)&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;multipleBirth&lt;/b&gt;: false&lt;/p&gt;&lt;p&gt;&lt;b&gt;photo&lt;/b&gt;: &lt;/p&gt;&lt;h3&gt;Contacts&lt;/h3&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;&lt;b&gt;Relationship&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Name&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Telecom&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;Wife &lt;span&gt;(Details : {SNOMED CT code &apos;127850001&apos; = &apos;127850001&apos;, given as &apos;Wife&apos;}; {http://hl7.org/fhir/patient-contact-relationship code &apos;partner&apos; = &apos;Partner)&lt;/span&gt;&lt;/td&gt;&lt;td&gt;Ariadne Bor-Jansma&lt;/td&gt;&lt;td&gt;ph: +31201234567(HOME)&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;h3&gt;Communications&lt;/h3&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;-&lt;/td&gt;&lt;td&gt;&lt;b&gt;Language&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;Preferred&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;*&lt;/td&gt;&lt;td&gt;Dutch &lt;span&gt;(Details : {urn:ietf:bcp:47 code &apos;nl-NL&apos; = &apos;??&apos;, given as &apos;Dutch&apos;})&lt;/span&gt;&lt;/td&gt;&lt;td&gt;true&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;&lt;b&gt;managingOrganization&lt;/b&gt;: &lt;a&gt;AUMC&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;&quot;;
	
	//build HCN
	tmp[&apos;identifier&apos;][0][&apos;type&apos;][&apos;coding&apos;][0][&apos;code&apos;] = xml[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;];
	
	//build ACC
	//tmp[&apos;identifier&apos;][1][&apos;type&apos;][&apos;coding&apos;][0][&apos;code&apos;]  = xml[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;];
		
	//build name	
	for each (itemName in tmp[&apos;name&apos;])//tmp.name
	{
		//logger.debug(&quot;----Looping through item name: &quot;+ JSON.stringify(tmp[&apos;name&apos;]));
		if (itemName.use == &quot;usual&quot; &amp;&amp;
		    xml[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.7&apos;] == &quot;U&quot;)
		{
			itemName.family[0] = xml[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;];
			itemName.given[0]  = xml[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;];
			itemName.given[1]  = (xml[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;]) != undefined ? xml[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;] : &quot;&quot;;
		}
		else if (itemName.use == &quot;nickname&quot;)
		{
			itemName.family[0] = (xml[&apos;ZPD&apos;][&apos;ZPD.7&apos;][&apos;ZPD.7.1&apos;] != undefined) ? xml[&apos;ZPD&apos;][&apos;ZPD.7&apos;][&apos;ZPD.7.1&apos;] : &quot;&quot; ;
		}
	}
	
	//build telecom -
	var cntTelecom = 0;
	for each (item in xml[&apos;PID&apos;][&apos;PID.13&apos;])
	{
		tmp[&apos;telecom&apos;][cntTelecom][&apos;system&apos;] = GetFHIRTelecomSystem(xml[&apos;PID&apos;][&apos;PID.13&apos;][cntTelecom][&apos;PID.13.3&apos;]);
		tmp[&apos;telecom&apos;][cntTelecom][&apos;value&apos;]  = xml[&apos;PID&apos;][&apos;PID.13&apos;][cntTelecom][&apos;PID.13.6&apos;].toString() + xml[&apos;PID&apos;][&apos;PID.13&apos;][cntTelecom][&apos;PID.13.7&apos;].toString();
		tmp[&apos;telecom&apos;][cntTelecom][&apos;use&apos;]    = GetFHIRTelecomUse(xml[&apos;PID&apos;][&apos;PID.13&apos;][cntTelecom][&apos;PID.13.2&apos;]);
		cntTelecom++;
	}
	
	//build gender
	tmp[&apos;gender&apos;] = GetFHIRGender(xml[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;]);
	
	//build birthdate
	tmp[&apos;birthDate&apos;]	=  GetDOB(xml[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString());

	//build address
	var cntAddress = 0;	
	for each (item in xml[&apos;PID&apos;][&apos;PID.11&apos;])
	{
		tmp[&apos;address&apos;][cntAddress][&apos;use&apos;]        = GetFHIRAddressUse(xml[&apos;PID&apos;][&apos;PID.11&apos;][cntAddress][&apos;PID.11.7&apos;]); //11.7	
		
		tmp[&apos;address&apos;][cntAddress][&apos;line&apos;]    = xml[&apos;PID&apos;][&apos;PID.11&apos;][cntAddress][&apos;PID.11.1&apos;].toString().split(&quot;\\.br\\&quot;); //11.1;
		tmp[&apos;address&apos;][cntAddress][&apos;city&apos;]       = xml[&apos;PID&apos;][&apos;PID.11&apos;][cntAddress][&apos;PID.11.3&apos;].toString(); //11.3;
		tmp[&apos;address&apos;][cntAddress][&apos;postalCode&apos;] = xml[&apos;PID&apos;][&apos;PID.11&apos;][cntAddress][&apos;PID.11.5&apos;].toString(); //11.5;
		tmp[&apos;address&apos;][cntAddress][&apos;country&apos;]    = xml[&apos;PID&apos;][&apos;PID.11&apos;][cntAddress][&apos;PID.11.6&apos;].toString(); //11.6;
		tmp[&apos;address&apos;][cntAddress][&apos;state&apos;]      = xml[&apos;PID&apos;][&apos;PID.11&apos;][cntAddress][&apos;PID.11.4&apos;].toString(); //11.4;
		cntAddress++;
	}

	//build deceased
	tmp[&apos;deceasedBoolean&apos;]  = GetFHIRDeathIndicator(xml[&apos;PID&apos;][&apos;PID.30&apos;][&apos;PID.30.1&apos;]);

	//
	//======================
	//Convert NTE-ZNT to FHIR (valueAnnotation object)
	//Create patient notes for patient resource
	{
	var patientNotesCount = xml[&apos;NTE&apos;].length();
	logger.debug(&quot;Patient Notes from HL7: &quot; +  patientNotesCount);

	//
	//build the extension json object on the fly to accomodate numerous NTE segments (notes)
	//

	//
	//build extension array
	//
	var extensionList = &quot;&quot;;
	for (i = 1; i &lt;= patientNotesCount; i++)
	{
	   if (i &lt; patientNotesCount)
	   {
	     extensionList = extensionList +  &quot;{\&quot;url\&quot;:\&quot;\&quot;, \&quot;valueAnnotation\&quot;:{}},&quot;;	       
	   }
	   else if (i == patientNotesCount)
	   {
	     extensionList = extensionList +  &quot;{\&quot;url\&quot;:\&quot;\&quot;, \&quot;valueAnnotation\&quot;:{}}&quot;;
	   }
	}
	var extensions = &quot;[&quot; + extensionList + &quot;]&quot;;
	extensions = JSON.parse(extensions);
	
	
	
	//
	//build authorReference
	//
	var authorReference = {};
	authorReference.reference = &quot;person/id&quot;;
	authorReference.display = &quot;User that made the note&quot;;

	

	//
	//loop - populate all
	//
	for (i = 0; i &lt; patientNotesCount; i++)
	{
		//
		//build valueAnnotation
		//
		valueAnnotation = {};
		
		//
		//populate valueAnnotation
		//
		valueAnnotation.authorReference = authorReference;
		
		if (xml[&apos;ZNT&apos;][&apos;ZNT.3&apos;][i][&apos;ZNT.3.1&apos;].toString().trim() != &quot;&quot;)
		{
			//logger.debug(&quot;ZNT IF run date&quot; +  xml[&apos;ZNT&apos;][&apos;ZNT.3&apos;][i][&apos;ZNT.3.1&apos;]);
			valueAnnotation.time = GetISODate(xml[&apos;ZNT&apos;][&apos;ZNT.3&apos;][i][&apos;ZNT.3.1&apos;]);
		}
		else
		{
			valueAnnotation.time = &quot;&quot;;
		}
		
		valueAnnotation.text = xml[&apos;NTE&apos;][&apos;NTE.3&apos;][i][&apos;NTE.3.1&apos;];

		//
		//build extension array
		//
		var extension = [
			    {&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/NoteFrequency&quot;, &quot;valueString&quot;:&quot;&quot;},
			    {&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/NoteType&quot;, &quot;valueCode&quot;:&quot;&quot;}
		];
	
		//
		//populate extension
		//
		for each (item in extension)
		{
			if (item.url.toString().toUpperCase().indexOf(&apos;NOTEFREQUENCY&apos;) &gt; -1)
			{
				item.valueString = xml[&apos;ZNT&apos;][&apos;ZNT.2&apos;][i][&apos;ZNT.2.1&apos;];
				//logger.debug(&quot;NoteFreq found. ZNT 2 is: &quot; + xml[&apos;ZNT&apos;][&apos;ZNT.2&apos;][i][&apos;ZNT.2.1&apos;]);
				//logger.debug(&quot;item.valueString: &quot; + item.valueString);
			}			
			else if (item.url.toString().toUpperCase().indexOf(&apos;NOTETYPE&apos;) &gt; -1)
			{
				item.valueCode = xml[&apos;NTE&apos;][&apos;NTE.4&apos;][i][&apos;NTE.4.1&apos;];
				//logger.debug(&quot;NOTETYPE found. NTE 4 is: &quot; + xml[&apos;NTE&apos;][&apos;NTE.4&apos;][i][&apos;NTE.4.1&apos;]);
				//logger.debug(&quot;item.valueString: &quot; + item.valueCode);
			}
			valueAnnotation.extension = extension;
		}
		//populate extensions array
		extensions[i][&apos;url&apos;] = &quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/Note&quot;;
		extensions[i][&apos;valueAnnotation&apos;] = valueAnnotation;

	}//END OF test loop

     if (GetTimeFromMSH(xml[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;])!= &quot;&quot;){
		timestamp = {&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/timestamp&quot;,
		             &quot;valueString&quot; : &quot;&quot;};
		timestamp.valueString = GetTimeFromMSH(xml[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;]);			
		extensions.push(timestamp);
     }
	//put extensions array into JSON FHIR template
	logger.debug(extensions.length);
	logger.debug(JSON.stringify(extensions));
	if (extensions.length &gt;= 1){
	  tmp[&apos;extension&apos;] = extensions; //extension; 
	}
	
		
	
	} //end of create patient notes section
	
	//
	//return a FHIR Patient Resource 
	//
	
	//don&apos;t stringify if order bundle
	//don&apos;t clean up if order bundle
	if (isBundle == false)
	{
		//clean up  - OLIS spec doesn&apos;t use.	
		delete tmp[&apos;maritalStatus&apos;];
		delete tmp[&apos;photo&apos;];
		delete tmp[&apos;communication&apos;];
		delete tmp[&apos;contact&apos;];
		delete tmp[&apos;managingOrganization&apos;];
		//delete tmp[&apos;identifier&apos;][1];
		delete tmp[&apos;id&apos;];
		delete tmp[&apos;text&apos;];
		delete tmp[&apos;multipleBirthBoolean&apos;];
		
		return JSON.stringify(tmp);
	}
	
	//FHIR Bundle - only clean up template if we are on last order
	if (isLastOrder == true)
	{
		//clean up  - OLIS spec doesn&apos;t use.	
		delete tmp[&apos;maritalStatus&apos;];
		delete tmp[&apos;photo&apos;];
		delete tmp[&apos;communication&apos;];
		delete tmp[&apos;contact&apos;];
		delete tmp[&apos;managingOrganization&apos;];
		//delete tmp[&apos;identifier&apos;][1];
		delete tmp[&apos;id&apos;];
		delete tmp[&apos;text&apos;];
		delete tmp[&apos;multipleBirthBoolean&apos;];
	}

	logger.debug(&quot;Patient Resource:&quot; + JSON.stringify(tmp));
	return tmp;
}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>422910a7-6708-4398-9c9f-563a489f8146</id>
            <name>Create FHIR Patient Resource for BUNDLE (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738019</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Creates a FHIR patient resource for FHIR Bundle.

	@return {json} FHIR Patient Resource
*/
// Changes XML to JSON
//xml = xml version of the hl7 response from IntRLab
//tmp = outbound message template (json)
function CreatePatientResourceForBundle(inBundle, inHL7) 
{
	logger.info(&quot;In code template.  CreatePatientResourceForBundle xml: &quot;);
	//logger.info(&quot;In code template.  CreatePatientResource tmp: &quot; + JSON.stringify(tmp));
	//(inHL7[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;] != undefined) ? true : false
		
	//create resource
	var PatientRes 	= new Object();
	
	//create resourceType
	PatientRes.resourceType = &quot;Patient&quot;;
	
	//create extensions for patient notes
	/*
	//if NTE/ZNT under PID...
	PatientRes.extension = new Array();
	
	//create valueAnnotation
	var valueAnnotation = new Object();
	valueAnnotation.extension = new Array();
	valueAnnotation.extension[0] = {&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/NoteFrequency&quot;, &quot;valueString&quot;:&quot;&quot;};
	valueAnnotation.extension[1] = {&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/timestamp&quot;, &quot;valueString&quot;:&quot;&quot;};
	valueAnnotation.extension[2] = {&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/NoteType&quot;, &quot;valueString&quot;:&quot;&quot;};
	valueAnnotation.authorReference = {&quot;reference&quot;:&quot;person/id&quot;, &quot;display&quot;:&quot;User that made the note&quot;};
	valueAnnotation.time = &quot;&quot;;
	valueAnnotation.text = &quot;&quot;;
	
	PatientRes.extension[0] = {&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/PatientNote&quot;, &quot;valueAnnotation&quot;:valueAnnotation};
	*/	
	
	//create identifier array
	if (inHL7[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;] == &quot;JHN&quot;)
	{
		
		//create identifier array
		PatientRes.identifier = new Array();
		var objCode 	= new Array();
		objCode[0] 	= {&quot;system&quot;:&quot;hcn&quot;, &quot;code&quot;: inHL7[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;]};
		objCode.code 	= &quot;&quot;;
		var coding 	=  objCode ;
		var arrCoding 	= new Object();
		arrCoding.coding 	= coding ;
		var objIdentifier 	= new Object();
		objIdentifier.use 	= &quot;official&quot;;
		objIdentifier.type 	= {&quot;coding&quot;:coding};
		PatientRes.identifier[0] = objIdentifier;
	}
	
	//create name array
	if (inHL7[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;].toString().trim() != &quot;&quot;)
	{
		
		//entryPatientRes[&apos;identifier&apos;][0][&apos;type&apos;][&apos;coding&apos;][0][&apos;code&apos;]   = inHL7[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;];
		//entryPatientRes[&apos;identifier&apos;][0][&apos;type&apos;][&apos;coding&apos;][0][&apos;system&apos;] = &quot;hcn&quot;;
		PatientRes.name = new Array();
	
		var nameObj1 = new Object();
		nameObj1.use = &quot;usual&quot;;
		nameObj1.family = inHL7[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;];
		
		var arrGiven = new Array();
		arrGiven[0] = inHL7[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;]; //first name
		arrGiven[1] = inHL7[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;]; //middle name
		
		nameObj1.given = arrGiven;
		PatientRes.name[0] = nameObj1;
		
		if (inHL7[&apos;ZPD&apos;])
		{
			var nameObj2 = new Object();
			nameObj2.use = &quot;nickname&quot;;
			nameObj2.family = inHL7[&apos;ZPD&apos;][&apos;ZPD.7&apos;][&apos;ZPD.7.1&apos;];
			
			PatientRes.name[1] = nameObj2;
		}
	}
	
	
	if (inHL7[&apos;PID&apos;][&apos;PID.13&apos;].toString().trim() != &quot;&quot;)
	{
		//create telecom
		var arrTelcom = new Array();
		var phoneRank = 1;
		
		for each(telecomItem in inHL7[&apos;PID&apos;][&apos;PID.13&apos;])
		{
			if (telecomItem.toString().trim() != &quot;&quot;)
			{
				logger.debug(&quot;Found PID-13. Create telecom fhir object: &quot; + JSON.stringify(inHL7[&apos;PID&apos;][&apos;PID.13&apos;]));
				var objTelecom = new Object();
				objTelecom.system 	= GetFHIRTelecomSystem(telecomItem[&apos;PID.13.3&apos;]);
				//add dashes
				var phone1 	   	= telecomItem[&apos;PID.13.7&apos;].substring(0, 3);
				var phone2  	   	= telecomItem[&apos;PID.13.7&apos;].substring(3, 7);
				var phoneFinal    	= phone1 + &quot;-&quot; + phone2;
				objTelecom.value 	= telecomItem[&apos;PID.13.6&apos;] + &quot;-&quot; + phoneFinal;
				objTelecom.use 	= GetFHIRTelecomUse(telecomItem[&apos;PID.13.2&apos;]);
	
				//rank #1 for primary PRN/PHONE and rank #2 for secondary
				if (telecomItem[&apos;PID.13.2&apos;] == &quot;PRN&quot; &amp;&amp;
				    telecomItem[&apos;PID.13.3&apos;] == &quot;PH&quot;)
				{
					//add rank. first one should be primary, second one secondary
					objTelecom.rank 	= phoneRank;
					phoneRank++;
				}
				
				arrTelcom[arrTelcom.length] = objTelecom;
			}//end of telecom

			
		}//end of telecom loop
	
	PatientRes.telecom = arrTelcom;
	}
	
	

	
	
	//create gender
	if (inHL7[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;].toString().trim() != &quot;&quot;)
	{
		
		PatientRes.gender = GetFHIRGender(inHL7[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;]);
	}
	
	//create b-day
	if (inHL7[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;].toString().trim() != &quot;&quot;)
	{
		
		PatientRes.birthDate = inHL7[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;];
	}
	
	
	//create address
	if (inHL7[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].toString().trim() != &quot;&quot;)
	{
		blnPatientData 	= true;
		PatientRes.address 	= new Array();
		var objAddress 	= new Object();
		objAddress.use	     = &quot;home&quot;
		
		if (inHL7[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.7&apos;] == &quot;H&quot;)
		{
			objAddress.use   = &quot;home&quot;; //PId-11.7
		}
		objAddress.line       = inHL7[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.1&apos;].split(&quot;\\.br\\&quot;);; //pid-11.2=line2?
		objAddress.city       = inHL7[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.3&apos;];
		objAddress.state 	  = inHL7[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.4&apos;];
		objAddress.postalCode = inHL7[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.5&apos;];
		objAddress.country 	  = inHL7[&apos;PID&apos;][&apos;PID.11&apos;][&apos;PID.11.6&apos;];
		PatientRes.address[0] = objAddress;
	}

	//any data?
	if (!isObjectEmpty(PatientRes))
	{
		//add fullUrl:
		var PatientResource = &quot;{ \&quot;resource\&quot; &quot; + &quot;:&quot; + JSON.stringify(PatientRes) + &quot;}&quot;;
		//logger.debug(&quot;New Patient Resourcee: &quot; +  JSON.stringify(PatientRes));
		return JSON.parse(PatientResource);
	}
	else
	{
		return undefined;
	}
}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>15af3570-deb5-4493-b77c-1e71df304731</id>
            <name>Create FHIR Practitioner Resource  (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738862</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Creates a FHIR practitioner resource for FHIR Bundle.
	
	@param {json} inBundle - outbound message template (json)
	@param {Any} inHL7 - HL7 response from IntRLab
	@return {json,boolean} return Location resource or false no data message. 

*/
function CreatePractitionerResource(inBundle, inHL7)
{
	//logger.debug(&quot;IN  CreatePractitionerResource: &quot;);
	
	//create resource
	var PractitionerRes 	  = new Object();
     logger.debug(inHL7);
	if (inHL7[&apos;OBR&apos;][&apos;OBR.16&apos;][0][&apos;OBR.16.1&apos;].toString().trim() != &quot;&quot;)
	{
		//create resourceType
		PractitionerRes.resourceType = &quot;Practitioner&quot;;
		
		//create identifier array
		PractitionerRes.identifier = [{&quot;use&quot;: &quot;&quot;, &quot;value&quot;: &quot;&quot;}];
		PractitionerRes.identifier[0].use = &quot;official&quot;;
		PractitionerRes.identifier[0].value = inHL7[&apos;OBR&apos;][&apos;OBR.16&apos;][0][&apos;OBR.16.1&apos;]; //ID

		//create name object
		PractitionerRes.name = new Object();
		PractitionerRes.name.family = new Array(inHL7[&apos;OBR&apos;][&apos;OBR.16&apos;][0][&apos;OBR.16.2&apos;]);
		PractitionerRes.name.given  = new Array(inHL7[&apos;OBR&apos;][&apos;OBR.16&apos;][0][&apos;OBR.16.3&apos;]);
		PractitionerRes.name.prefix = new Array(inHL7[&apos;OBR&apos;][&apos;OBR.16&apos;][0][&apos;OBR.16.6&apos;]);

		//create practitioner role
		PractitionerRes.practitionerRole = new Array();
		var role = new Object();
		role.coding = new Array();
		var roleCoding = new Object();
		roleCoding.system = &quot;role&quot;;
		roleCoding.code = &quot;doctor&quot;;
		role.coding[0] = roleCoding ;
		PractitionerRes.practitionerRole[0] = &quot;{ \&quot;role\&quot; &quot; + &quot;:&quot; +  JSON.stringify(role) + &quot;}&quot;;
		PractitionerRes.practitionerRole[0] = JSON.parse(PractitionerRes.practitionerRole[0]);

	
		//for each(entryPractitionerRes in PractitionerRes)
		//{
			//entryPractitionerRes[&apos;practitionerRole&apos;][0][&apos;role&apos;][&apos;coding&apos;][0][&apos;code&apos;] = &quot;doctor&quot;;
			//entryPractitionerRes[&apos;identifier&apos;][0][&apos;value&apos;] = inHL7[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;]; //ID
			//entryPractitionerRes[&apos;name&apos;][&apos;family&apos;][0] 	  = inHL7[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;]; //last
			//entryPractitionerRes[&apos;name&apos;][&apos;given&apos;][0] 	  = inHL7[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.3&apos;]; //first
			//entryPractitionerRes[&apos;name&apos;][&apos;prefix&apos;][0] 	  = inHL7[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.6&apos;]; //prefix
		//}
	}
	

	//TODO: ask dan about where to get address from.
	
	//create telecom array
	//PractitionerRes.telecom = new Array();
	//PractitionerRes.telecom[0] = {&quot;system&quot;:&quot;phone&quot;,&quot;value&quot;:&quot;&quot;, &quot;use&quot;:&quot;work&quot;};
	//PractitionerRes.telecom[1] = {&quot;system&quot;:&quot;phone&quot;,&quot;value&quot;:&quot;&quot;};

	//create address array
	/*PractitionerRes.address = new Array(4);
	PractitionerRes.address[0] = [{&quot;line&quot;:&quot;&quot;}]
	PractitionerRes.address[1] = {&quot;city&quot;:&quot;&quot;};
	PractitionerRes.address[2] = {&quot;state&quot;:&quot;&quot;};
	PractitionerRes.address[3] = {&quot;postalcode&quot;:&quot;&quot;};
	PractitionerRes.address[4] = {&quot;country&quot;:&quot;&quot;};
	PractitionerRes.address = new Array();
	var addressLine = new Object();
	addressLine.line = new Array(&quot;&quot;); //address line 1 &amp; 2
	addressLine.city = &quot;&quot;;
	addressLine.state = &quot;&quot;;
	addressLine.postalCode = &quot;&quot;;
	addressLine.country = &quot;&quot;;
	PractitionerRes.address[0] = addressLine ;
	*/

	if (!isObjectEmpty(PractitionerRes))
	{
		var PractitionerResource = &quot;{ \&quot;resource\&quot; &quot; + &quot;:&quot; + JSON.stringify(PractitionerRes) + &quot;}&quot;;
		//logger.debug(&quot;Encounter NEW: &quot; + JSON.stringify(JSON.parse(PractitionerResource)));
		return JSON.parse(PractitionerResource);
	
	}else
	{
		return undefined;
	}
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>647ed3af-06a8-45db-8101-130059cfd532</id>
            <name>Create FHIR Response</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202737982</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Creates a response containing FHIR resource with IntRLab accession number.
	
		@param {Any} inAccessionNumber - 
		@return {String} return description
*/
function CreateFHIRResponse(inTemplate, inAccessionNumber) {
	// TODO: Enter code here
	try
	{
		var inJsonObj    = JSON.parse(inTemplate);

		if (inJsonObj.identifier !=  undefined)
		{
			inJsonObj.identifier[0].value = inAccessionNumber;
		}
		//logger.debug(&quot;value: &quot; + inJsonObj.identifier[0].value);
		//logger.debug(&quot;In CreateFHIRResponse Code Template JSON: &quot; + JSON.stringify(inJsonObj));
		//logger.debug(&quot;In CreateFHIRResponse Code Template inAccessionNumber: &quot; + inAccessionNumber);
		
		//convert template to JSON
		return inJsonObj; //JSON.stringify(inJsonObj);
		
	}
	catch(err)
	{
		logger.error(err);
		return &quot;500&quot;;	
	}
	
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>70429a9f-0216-4bf1-a911-ed1e28326984</id>
            <name>Create HL7 (ORM) from FHIR (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738750</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	LifeLabs function to create HL7 from FHIR.

	@param {JSON} inFHIR - FHIR object (JSON)
	@param {XML} inHL7 - HL7 Object (XML)
	@param {String} messageId - pass context.getMessageId()
	@return {String} HL7 format
*/
//USES:  &quot;HL7 Translations (LifeLabs)&quot; Code Template Library
function CreateHL7fromFHIR(inFHIR, inHL7, messageId)
{
	//logger.debug(&quot;IN CreateHL7fromFHIR CODE TEMPLATE inHL7: &quot; + inHL7); //no length
	
	//var arrOrderDetails   = HasMultipleOrdersInFHIRBundle(inFHIR).split(&quot;|&quot;);
	//var blnHasMultiTests  = arrOrderDetails[0];
	//var cntTests          = arrOrderDetails[1];
	//logger.debug(&quot;Multi Tests?: &quot; + blnHasMultiTests);
	//logger.debug(&quot;How Many Tests?: &quot; + cntTests);

	var curORMXML = new XML(&quot;&lt;HL7Message&gt;&lt;/HL7Message&gt;&quot;);

	//resources used in this bundle
	var PatientRes 		= new Array();
	var PractitionerRes 	= new Array();
	var EncounterRes		= new Array();
	var LocationRes		= new Array();
	var DiagnosticOrderRes	= new Array();

	//diagnstic order extensions in bundle
	var extServiceDate					= &quot;&quot;;
	var extPayerType					= &quot;&quot;;
	var extCollectionDate				= &quot;&quot;;
	var extSubjectDiagnosis				= &quot;&quot;;
	var extStatTransportMode 			= &quot;&quot;;
	var extStatETA						= &quot;&quot;;
	var extStatSpun					= &quot;&quot;;
	var extStatInstructions  			= &quot;&quot;;
	var extSupplementalLabels 			= &quot;&quot;;
	var extChartNumberClientInfo 			= &quot;&quot;;
	var extResultsContact				= &quot;&quot;;
	var extResultsContactPhone 			= &quot;&quot;;
	var extResultsContactPhoneAfterHrs 	= &quot;&quot;;
	var extResultsContactPhoneInstrutions 	= &quot;&quot;;
	var extResultsContactFax				= &quot;&quot;;
	var extResultsContactFaxAttn			= &quot;&quot;;
	var extMyEHealth					= &quot;&quot;;
	var extContactPointSystem			= &quot;&quot;;
	var extContactPointValue				= &quot;&quot;;
	var extContactPointExtension			= &quot;&quot;;
	var extCopyToRecipientUIDs			= new Array();
	var extCopyToPatientUID				= &quot;&quot;;
	var extSubjectDiagnosis				= &quot;&quot;;
	var extPatientNotes					= &quot;&quot;;
	
	var patientNickname					= &quot;&quot;;
	
	var cntExtensions					= 0;
	var cntCopyTo						= 0;
	var cntPreReportables;
	var cntPatientNotes					= 0;
	
	
try{

		//
		// get resources - GetResourceFromBundle code at the end of this page.
		//
		PatientRes      	= GetResourceFromBundle(inFHIR, &quot;PATIENT&quot;);
		PractitionerRes 	= GetResourceFromBundle(inFHIR, &quot;PRACTITIONER&quot;);
		DiagnosticOrderRes  = GetResourceFromBundle(inFHIR, &quot;DIAGNOSTICORDER&quot;);
		EncounterRes		= GetResourceFromBundle(inFHIR, &quot;ENCOUNTER&quot;);
		LocationRes		= GetResourceFromBundle(inFHIR, &quot;LOCATION&quot;);

		
		
		//
		//Loop through extensions now. Numerous segments will need.
		//
		for each( extensionItem in DiagnosticOrderRes[0].extension)
		{
			//logger.debug(&quot;extensionItem: &quot; + JSON.stringify(extensionItem));
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-serviceDateTime&quot;)
			{
				extServiceDate = extensionItem.valueString;
			}
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-payertype&quot;)
			{
				extPayerType 	= extensionItem.valueString;
			}
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-collectionDateTime&quot;)
			{
				extCollectionDate = extensionItem.valueString;
			}
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-resultsContact&quot;)
			{
				extResultsContact = extensionItem.valueString;
			}
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-statTransportMode&quot;)
			{
				extStatTransportMode = extensionItem.valueString;
			}
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-statETA&quot;)
			{
				extStatETA = extensionItem.valueString;
			}
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-statSpun&quot;)
			{
				extStatSpun = extensionItem.valueString;
			}
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-statInstructions&quot;)
			{
				extStatInstructions = extensionItem.valueString;
			}
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-supplementalLabels&quot;)
			{
				extSupplementalLabels = extensionItem.valueString;
			}
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/eorder-contactpoint&quot;)
			{
				if (extensionItem.valueContactPoint)
				{
					extContactPointSystem 	= extensionItem.valueContactPoint.system;
					extContactPointValue 	= extensionItem.valueContactPoint.value;
					extContactPointExtension = extensionItem.valueContactPoint.extension;
				}
			}
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-myEHealth&quot;)
			{
				extMyEHealth = extensionItem.valueBoolean;
			}
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-copytopatient&quot;)
			{
				//logger.debug(&quot;Found copy to PATIENT: &quot; + extensionItem.valueReference.reference);
				extCopyToPatientUID = extensionItem.valueReference.reference;
				cntCopyTo++;
			}
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-copytorecipient&quot;)
			{
				//logger.debug(&quot;Found copy to DOCTORS:&quot; + extensionItem.valueReference.reference);
				extCopyToRecipientUIDs[cntExtensions] = extensionItem.valueReference.reference;
				cntExtensions++;
				cntCopyTo++;
			}
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-chartNumberClientInfo&quot;)
			{
				extChartNumberClientInfo =  extensionItem.valueString;
			}
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-subjectdiagnosis&quot;)
			{
				extSubjectDiagnosis  = extensionItem.valueString;
			}
			
		}
					
		//
		//MSH - required
		//
		{
		//sending application
		//inHL7[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.1&apos;] = &quot;&quot;;
		inHL7[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.2&apos;] = &quot;WEB_GUI&quot;;
		inHL7[&apos;MSH&apos;][&apos;MSH.3&apos;][&apos;MSH.3.3&apos;] = &quot;X500&quot;; //X500 or ISO
		//sending facility
		inHL7[&apos;MSH&apos;][&apos;MSH.4&apos;][&apos;MSH.4.1&apos;] = &quot;LIFELABS BC&quot;;
		//receiving
		//inHL7[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.1&apos;] = &quot;&quot;;
		inHL7[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.2&apos;] = &quot;OLIS&quot;; //&quot;INTRLAB&quot;;
		inHL7[&apos;MSH&apos;][&apos;MSH.5&apos;][&apos;MSH.5.3&apos;] = &quot;X500&quot;;
		//logger.debug(&quot;MSH7&quot;);
		inHL7[&apos;MSH&apos;][&apos;MSH.7&apos;][&apos;MSH.7.1&apos;] = GetHL7Date(new Date().toISOString());
		inHL7[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.1&apos;] = &quot;ORM&quot;;
		inHL7[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.2&apos;] = &quot;O01&quot;;
		inHL7[&apos;MSH&apos;][&apos;MSH.9&apos;][&apos;MSH.9.3&apos;] = &quot;ORM_O01&quot;;
		//MSH-10 - from GET Timestamp if UPDATE
		//Leave blank for new 			
		inHL7[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;] = DateUtil.getCurrentDate(&apos;yyyyMMdd&apos;) + org.apache.commons.lang3.StringUtils.leftPad(messageId,6,&apos;0&apos;); //&quot;63936&quot;; //&quot;63936.2-63937.320.332903&quot;;
		//P=PROD, C=Conformance, S=Self-Test, T=Training
		inHL7[&apos;MSH&apos;][&apos;MSH.11&apos;][&apos;MSH.11.1&apos;] = &quot;S&quot;;
		inHL7[&apos;MSH&apos;][&apos;MSH.12&apos;][&apos;MSH.12.1&apos;] = &quot;2.3.1&quot;;
		inHL7[&apos;MSH&apos;][&apos;MSH.18&apos;][&apos;MSH.18.1&apos;] = &quot;8859/1&quot;;
		//grab current MSH
		curORMXML.appendChild(new XML(inHL7[&apos;MSH&apos;]));
		//logger.debug(&quot;MSH Added&quot;);
		}

		//
		//PID - required
		//
		{
			
		if (PatientRes.length == 1)
		{
			for each(entryPatientRes in PatientRes)
			{
				if (entryPatientRes[&apos;identifier&apos;][0][&apos;type&apos;][&apos;coding&apos;][0][&apos;system&apos;].toString().toUpperCase() == &quot;HCN&quot;)
				{
					inHL7[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.1&apos;] 	= entryPatientRes[&apos;identifier&apos;][0][&apos;type&apos;][&apos;coding&apos;][0][&apos;code&apos;];
					inHL7[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.5&apos;] 	= GetSystem(entryPatientRes[&apos;identifier&apos;][0][&apos;type&apos;][&apos;coding&apos;][0][&apos;system&apos;]);
				}
				inHL7[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.9&apos;][&apos;PID.3.9.1&apos;] = &quot;BC&quot;;
				inHL7[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.9&apos;][&apos;PID.3.9.2&apos;] = &quot;BRITISH COLUMBIA&quot;;
				inHL7[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.9&apos;][&apos;PID.3.9.3&apos;] = &quot;HL70347&quot;;

				//patient name array
				for each (itemName in entryPatientRes.name)
				{
					if (itemName.use == &quot;usual&quot;)
					{
						inHL7[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.1&apos;] 	= itemName.family; 
						inHL7[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.2&apos;] 	= itemName.given[0];
						inHL7[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.3&apos;] 	= (itemName.given[1] != undefined) ? itemName.given[1] : &quot;&quot;;  
					}
					if (itemName.use == &quot;nickname&quot;)
					{
						patientNickname = itemName.family;
					}
				}
					
				inHL7[&apos;PID&apos;][&apos;PID.5&apos;][&apos;PID.5.7&apos;]    = &quot;U&quot;;
				inHL7[&apos;PID&apos;][&apos;PID.7&apos;][&apos;PID.7.1&apos;] 	= GetHL7BirthDate(entryPatientRes[&apos;birthDate&apos;]);
				inHL7[&apos;PID&apos;][&apos;PID.8&apos;][&apos;PID.8.1&apos;] 	= GetGender(entryPatientRes[&apos;gender&apos;]);
				
				//patient address array
				for each (itemAddress in entryPatientRes.address)
				{
					//copy PID-11 and change type to &quot;M&quot;
					if (extCopyToPatientUID)
					{
						logger.debug(&quot;---//copytopatient, add 2nd address of type M: &quot; + JSON.stringify(inHL7[&apos;PID&apos;][&apos;PID.11&apos;]));
						//loop and create repeating address
						for(x = 0; x &lt; 2; x++)
						{
							inHL7[&apos;PID&apos;][&apos;PID.11&apos;][x][&apos;PID.11.1&apos;] = &quot;repeating&quot;;
							logger.debug(&quot;---//copytopatient creatign array: &quot; +  JSON.stringify(inHL7[&apos;PID&apos;][&apos;PID.11&apos;][x][&apos;PID.11.1&apos;]));

							if (x == 0)
							{
								inHL7[&apos;PID&apos;][&apos;PID.11&apos;][x][&apos;PID.11.1&apos;] = itemAddress.line[0] + ((itemAddress.line[1]  != undefined) ? &quot;\\.br\\&quot; + itemAddress.line[1] : &quot;&quot;);
								inHL7[&apos;PID&apos;][&apos;PID.11&apos;][x][&apos;PID.11.3&apos;] = itemAddress.city;
								inHL7[&apos;PID&apos;][&apos;PID.11&apos;][x][&apos;PID.11.4&apos;] = itemAddress.state;
								inHL7[&apos;PID&apos;][&apos;PID.11&apos;][x][&apos;PID.11.5&apos;] = itemAddress.postalCode;
								inHL7[&apos;PID&apos;][&apos;PID.11&apos;][x][&apos;PID.11.6&apos;] = itemAddress.country;
								inHL7[&apos;PID&apos;][&apos;PID.11&apos;][x][&apos;PID.11.7&apos;]  = GetAddressUse(itemAddress.use);
							
							}
							else if (x == 1)
							{
								inHL7[&apos;PID&apos;][&apos;PID.11&apos;][x][&apos;PID.11.1&apos;] = itemAddress.line[0]+ ((itemAddress.line[1]  != undefined) ? &quot;\\.br\\&quot; + itemAddress.line[1] : &quot;&quot;);
								inHL7[&apos;PID&apos;][&apos;PID.11&apos;][x][&apos;PID.11.3&apos;] = itemAddress.city;
								inHL7[&apos;PID&apos;][&apos;PID.11&apos;][x][&apos;PID.11.4&apos;] = itemAddress.state;
								inHL7[&apos;PID&apos;][&apos;PID.11&apos;][x][&apos;PID.11.5&apos;] = itemAddress.postalCode;
								inHL7[&apos;PID&apos;][&apos;PID.11&apos;][x][&apos;PID.11.6&apos;] = itemAddress.country;
								inHL7[&apos;PID&apos;][&apos;PID.11&apos;][x][&apos;PID.11.7&apos;]  = &quot;M&quot;;
							
							}
							
						}
					}
					else
					{
						logger.debug(&quot;no patient copy to address: &quot; +  JSON.stringify(inHL7[&apos;PID&apos;][&apos;PID.11&apos;][0]));
						if (itemAddress.use == &quot;home&quot;)
						{
							inHL7[&apos;PID&apos;][&apos;PID.11&apos;][0][&apos;PID.11.1&apos;] = itemAddress.line[0] + ((itemAddress.line[1]  != undefined) ? &quot;\\.br\\&quot; + itemAddress.line[1] : &quot;&quot;);

							inHL7[&apos;PID&apos;][&apos;PID.11&apos;][0][&apos;PID.11.3&apos;] = itemAddress.city;
							inHL7[&apos;PID&apos;][&apos;PID.11&apos;][0][&apos;PID.11.4&apos;] = itemAddress.state;
							inHL7[&apos;PID&apos;][&apos;PID.11&apos;][0][&apos;PID.11.5&apos;] = itemAddress.postalCode;
							inHL7[&apos;PID&apos;][&apos;PID.11&apos;][0][&apos;PID.11.6&apos;] = itemAddress.country;
						}
						if (itemAddress.use){
							inHL7[&apos;PID&apos;][&apos;PID.11&apos;][0][&apos;PID.11.7&apos;]  = GetAddressUse(itemAddress.use);
						} else
						{
							inHL7[&apos;PID&apos;][&apos;PID.11&apos;][0][&apos;PID.11.7&apos;]  = GetAddressUse(&quot;home&quot;); 
						}
						//delete repeating
						delete  inHL7[&apos;PID&apos;][&apos;PID.11&apos;][1];
					}
				}


				
				//patient telecom array
				for each (telecom in entryPatientRes.telecom)
				{
					//logger.debug(&quot;telecom : &quot; +  JSON.stringify(telecom));
					//repeat if secondary exists - if this fails take out.
					
					if (telecom.use == &quot;home&quot;) //home
					{
						inHL7[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.2&apos;] = GetTelecomUse(telecom.use);
						inHL7[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.3&apos;] = GetTelecomSystem(telecom.system);
						inHL7[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.6&apos;] = GetTelecomNumber(telecom.value, true);
						inHL7[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.7&apos;] = GetTelecomNumber(telecom.value, false);	
					}
					else
					{
						logger.debug(&quot;telecom secondary number exists: &quot;);
						inHL7[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.2&apos;] = &quot;ORN&quot;; //secondary
						inHL7[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.3&apos;] = GetTelecomSystem(telecom.system);
						inHL7[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.6&apos;] = GetTelecomNumber(telecom.value, true);
						inHL7[&apos;PID&apos;][&apos;PID.13&apos;][&apos;PID.13.7&apos;] = GetTelecomNumber(telecom.value, false);	
					}
					
				}

				
				}
			
			//standing order number
			//inHL7[&apos;PID&apos;][&apos;PID.3&apos;][&apos;PID.3.11&apos;] 	= &quot;VC&quot;;
		}
		
		//grab current PID
		curORMXML.appendChild(new XML(inHL7[&apos;PID&apos;]));
		//logger.debug(&quot;PID Added&quot;);
		
		} // end of PID section
 
		//
		//ZPD - PID extension segment
		//
		{
		//ZPD|||Y|
		//1 - Patient Consent Indicator (no longer supported)
		//2 - Patient Identification Verified Flag. Must be &quot;Y&quot; or empty.
		//3 - Patient Consent block-all indicator
		inHL7[&apos;ZPD&apos;] 			= &quot;|&quot;;
		inHL7[&apos;ZPD&apos;][&apos;ZPD.5&apos;] 	= extSubjectDiagnosis;
		inHL7[&apos;ZPD&apos;][&apos;ZPD.7&apos;]	= patientNickname;
		//grab current PID
		curORMXML.appendChild(new XML(inHL7[&apos;ZPD&apos;]));
		//logger.debug(&quot;ZPD added&quot;);
		
		}//end of ZPD section
		

		//NTE-ZNT Segment Pair
		{

		//
		//Loop through extensions .
		//
		var cntPatientLoop = 0;
		for each( extensionItem in PatientRes[0].extension)
		{	
			if (extensionItem.url == &quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/Note&quot;)
			{
				if (extensionItem.valueAnnotation)
				{
					logger.debug(&quot;PatientNotes counter:&quot; + cntPatientNotes);
					logger.debug(&quot;Patient Loop counter:&quot; + cntPatientLoop);
					//NTE
					//The Global Comments will be passed as PID level NTE - Patient Notes
					//4.1 Identifier
					//4.2 Text
					//4.3 Name of Coding System
					inHL7[&apos;NTE&apos;][cntPatientNotes] = new XML(&quot;&lt;NTE&gt;&lt;/NTE&gt;&quot;);
					inHL7[&apos;NTE&apos;][cntPatientNotes][&apos;NTE.1&apos;][&apos;NTE.1.1&apos;] = cntPatientLoop + 1;
					inHL7[&apos;NTE&apos;][cntPatientNotes][&apos;NTE.2&apos;][&apos;NTE.2.1&apos;] = &quot;P&quot;;
					inHL7[&apos;NTE&apos;][cntPatientNotes][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] = extensionItem.valueAnnotation.text;
					inHL7[&apos;NTE&apos;][cntPatientNotes][&apos;NTE.4&apos;][&apos;NTE.4.1&apos;] = &quot;PATINST&quot;;
					inHL7[&apos;NTE&apos;][cntPatientNotes][&apos;NTE.4&apos;][&apos;NTE.4.2&apos;] = &quot;PATIENT INSTRUCTION&quot;;
					inHL7[&apos;NTE&apos;][cntPatientNotes][&apos;NTE.4&apos;][&apos;NTE.4.3&apos;] = &quot;LIFELABS&quot;;
					
					//grab current segment
					
					//ZNT - NTE note extension
					inHL7[&apos;ZNT&apos;][cntPatientNotes] = new XML(&quot;&lt;ZNT&gt;&lt;/ZNT&gt;&quot;);
					inHL7[&apos;ZNT&apos;][cntPatientNotes][&apos;ZNT.1&apos;][&apos;ZNT.1.1&apos;] = &quot;&quot;;
					inHL7[&apos;ZNT&apos;][cntPatientNotes][&apos;ZNT.1&apos;][&apos;ZNT.1.2&apos;] = &quot;LIFELABS&quot;;
					inHL7[&apos;ZNT&apos;][cntPatientNotes][&apos;ZNT.1&apos;][&apos;ZNT.1.3&apos;] = &quot;X500&quot;;
					
					//loop extensions
					for each (ext in extensionItem.valueAnnotation.extension)
					{
						if (ext.url == &quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/NoteFrequency&quot;)
						{
							//logger.debug(&quot;Found notefrequency extension. Put into ZNT2.1&quot;);
							inHL7[&apos;ZNT&apos;][cntPatientNotes][&apos;ZNT.2&apos;][&apos;ZNT.2.1&apos;] = ext.valueString;
						}
						if (ext.url == &quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/timestamp&quot;)
						{
							//logger.debug(&quot;Found timestamp extension. Put into MSH-10&quot;);
							//curORMXML[&apos;MSH&apos;][&apos;MSH.10&apos;][&apos;MSH.10.1&apos;] = ext.valueString;	
						}
						if (ext.url == &quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/NoteType&quot;)
						{
							//logger.debug(&quot;Found timestamp note type. Put into NTE4.1&quot;);
							inHL7[&apos;NTE&apos;][cntPatientNotes][&apos;NTE.4&apos;][&apos;NTE.4.1&apos;] = ext.valueCode;
						}
						
					}
					logger.debug(&quot;-----------extensionItem.valueAnnotation.time....&quot; +  extensionItem.valueAnnotation.time.replace(/-/g,&quot;&quot;));//23-Mar-2016
					inHL7[&apos;ZNT&apos;][cntPatientNotes][&apos;ZNT.3&apos;][&apos;ZNT.3.1&apos;] =  GetHL7DateFromISO(extensionItem.valueAnnotation.time, &quot;yyyyMMdd&quot;); 

					//grab current segment
					curORMXML.appendChild(new XML(inHL7[&apos;NTE&apos;][cntPatientNotes]));

					//grab current segment
					curORMXML.appendChild(new XML(inHL7[&apos;ZNT&apos;][cntPatientNotes]));
				}
				cntPatientLoop++
				cntPatientNotes++;
			}
		}
		
		logger.debug(&quot;Patient notes size: &quot; + cntPatientNotes + &quot; &quot; + cntPatientLoop);

          //GLOBCOMM         
		for each(note in DiagnosticOrderRes[0].note)
		{
				logger.debug(&quot;GLOBCOM:&quot; + note.text);
				logger.debug(&quot;PatientNotes counter:&quot; + cntPatientNotes);
				logger.debug(&quot;Patient Loop counter:&quot; + cntPatientLoop);
			     //NTE
				//The Global Comments will be passed as PID level NTE - Patient Notes
				
				inHL7[&apos;NTE&apos;][cntPatientNotes] = new XML(&quot;&lt;NTE&gt;&lt;/NTE&gt;&quot;);
				inHL7[&apos;NTE&apos;][cntPatientNotes][&apos;NTE.1&apos;][&apos;NTE.1.1&apos;] = cntPatientLoop+1;
				inHL7[&apos;NTE&apos;][cntPatientNotes][&apos;NTE.2&apos;][&apos;NTE.2.1&apos;] = &quot;L&quot;;
				//if a canned comment was used then pass that in NTE.3, otherwise just send the free text
				if (note.extension.getByUrl(&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/CannedComment&quot;)){
				    inHL7[&apos;NTE&apos;][cntPatientNotes][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] = note.extension.getByUrl(&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/CannedComment&quot;).valueCode.toUpperCase();
				} else 
				{
				    inHL7[&apos;NTE&apos;][cntPatientNotes][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] = note.text.replace(/\r\n/g, &apos;\\.br\\&apos;).toUpperCase();
				}
				inHL7[&apos;NTE&apos;][cntPatientNotes][&apos;NTE.4&apos;][&apos;NTE.4.1&apos;] = note.extension.getByUrl(&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/NoteType&quot;).valueCode;
				inHL7[&apos;NTE&apos;][cntPatientNotes][&apos;NTE.4&apos;][&apos;NTE.4.2&apos;] = &quot;ORDER GLOBAL COMMENT&quot;;
				inHL7[&apos;NTE&apos;][cntPatientNotes][&apos;NTE.4&apos;][&apos;NTE.4.3&apos;] = &quot;LIFELABS&quot;;
				
				//grab current segment
				
				//ZNT - NTE note extension
				inHL7[&apos;ZNT&apos;][cntPatientNotes] = new XML(&quot;&lt;ZNT&gt;&lt;/ZNT&gt;&quot;);
				//inHL7[&apos;ZNT&apos;][cntPatientNotes][&apos;ZNT.1&apos;][&apos;ZNT.1.1&apos;] = &quot;&quot;;
				//inHL7[&apos;ZNT&apos;][cntPatientNotes][&apos;ZNT.1&apos;][&apos;ZNT.1.2&apos;] = &quot;LIFELABS&quot;;
				//inHL7[&apos;ZNT&apos;][cntPatientNotes][&apos;ZNT.1&apos;][&apos;ZNT.1.3&apos;] = &quot;X500&quot;;
				
				//grab current segment
				curORMXML.appendChild(new XML(inHL7[&apos;NTE&apos;][cntPatientNotes]));
	
				//grab current segment
				curORMXML.appendChild(new XML(inHL7[&apos;ZNT&apos;][cntPatientNotes]));
				cntPatientLoop++
				cntPatientNotes++;
			
			}
         
		}

		//PV1 - Visit Information
		{
			logger.debug(&quot;LocationRes&quot;);
			if (LocationRes.length == 1)
			{
				//Original Accession# will be in PV1.19, Note original Prefix will be deduced from the first 3 digits of the accession number
				inHL7[&apos;PV1&apos;][&apos;PV1.2&apos;][&apos;PV1.2.1&apos;] = GetPatientClass(&quot;Z&quot;);
				
				for each(entryLocationRes in LocationRes)
				{
					inHL7[&apos;PV1&apos;][&apos;PV1.3&apos;][&apos;PV1.3.1&apos;] = entryLocationRes[&apos;identifier&apos;][0][&apos;value&apos;]; 	
				}
			}

			logger.debug(&quot;PractitionerRes&quot;);

			if (PractitionerRes.length &gt;= 1)
			{
				for each(entryPractitionerRes in PractitionerRes)
				{
					//logger.debug(&quot;entryPractitionerRes: &quot; + JSON.stringify(entryPractitionerRes));
					logger.debug(&quot;checking role&quot;);
					if (entryPractitionerRes[&apos;practitionerRole&apos;]){
					if (entryPractitionerRes[&apos;practitionerRole&apos;][0][&apos;role&apos;][&apos;coding&apos;][0][&apos;code&apos;] == &quot;doctor&quot;)
					{
						//attending doctor
						inHL7[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.1&apos;] = entryPractitionerRes[&apos;identifier&apos;][0][&apos;value&apos;]; //ID
						inHL7[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.2&apos;] = entryPractitionerRes[&apos;name&apos;][&apos;family&apos;][0]; //last
						inHL7[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.3&apos;] = entryPractitionerRes[&apos;name&apos;][&apos;given&apos;][0]; //first
						inHL7[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.6&apos;] = validate(entryPractitionerRes[&apos;name&apos;][&apos;prefix&apos;][0],&quot;&quot;); //prefix
					}
					
					
					inHL7[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.13&apos;] = &quot;MDL&quot;;
					inHL7[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.22&apos;][&apos;PV1.7.22.1&apos;] = &quot;BC&quot;;
					inHL7[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.22&apos;][&apos;PV1.7.22.2&apos;] = &quot;BRITISH COLUMBIA&quot;;
					inHL7[&apos;PV1&apos;][&apos;PV1.7&apos;][&apos;PV1.7.22&apos;][&apos;PV1.7.22.3&apos;] = &quot;HL70347&quot;;
					}
					//IntRLab accession-level collection date - PV1.44 - return only date no time
					logger.debug(&quot;mapping collection date&quot;);
					inHL7[&apos;PV1&apos;][&apos;PV1.44&apos;][&apos;PV1.44.1&apos;] = GetHL7DateFromISO(extCollectionDate, &quot;yyyyMMddHHmmssZZZZ&quot;);
					
					//PV1-19 will hold original accession number
					//inHL7[&apos;PV1&apos;][&apos;PV1.19&apos;][&apos;PV1.19.1&apos;] = &quot;150019001&quot;; //
					//chart number
					if (extChartNumberClientInfo)
					{
						inHL7[&apos;PV1&apos;][&apos;PV1.50&apos;] = extChartNumberClientInfo;
					}
				}
				
			}
			//grab current segment
			curORMXML.appendChild(new XML(inHL7[&apos;PV1&apos;]));
			
			logger.debug(&quot;PV1 added&quot;);
		} //end of PV1

		
		//ORC-OBR-OBX-NTE-ZNT
		{
		if (DiagnosticOrderRes.length == 1)
		{
			for each(entryDiagnosticOrderRes in DiagnosticOrderRes)
			{
				for (var x = 0; x &lt; entryDiagnosticOrderRes.item.length; x++)
				{
					
					inHL7[&apos;ORC&apos;][&apos;ORC.1&apos;][&apos;ORC.1.1&apos;] = getAction();
					inHL7[&apos;ORC&apos;][&apos;ORC.4&apos;][&apos;ORC.4.1&apos;] = &quot;90129531111&quot;; 
					inHL7[&apos;ORC&apos;][&apos;ORC.4&apos;][&apos;ORC.4.3&apos;] = &quot;2.16.840.1.113883.3.59.1:9999&quot;;
					inHL7[&apos;ORC&apos;][&apos;ORC.4&apos;][&apos;ORC.4.4&apos;] = &quot;ISO&quot;;
					inHL7[&apos;ORC&apos;][&apos;ORC.9&apos;][&apos;ORC.9.1&apos;] = GetHL7Date(new Date().toISOString());
					//grab current segment
					curORMXML.appendChild(new XML(inHL7[&apos;ORC&apos;]));
					logger.debug(&quot;ORC added&quot;);
					//LifeLab&apos;s OID = 2.16.840.1.113883.3.1863
	
					inHL7[&apos;OBR&apos;][&apos;OBR.1&apos;][&apos;OBR.1.1&apos;] = x + 1;
		     		inHL7[&apos;OBR&apos;][&apos;OBR.2&apos;][&apos;OBR.2.1&apos;] = &quot;T20060810.000001.01&quot;;
					inHL7[&apos;OBR&apos;][&apos;OBR.2&apos;][&apos;OBR.2.3&apos;] = &quot;2.16.840.1.113883.3.1863:9999&quot;;
					inHL7[&apos;OBR&apos;][&apos;OBR.2&apos;][&apos;OBR.2.4&apos;] = &quot;ISO&quot;;
	
					//get non-profile tests
					if (entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;code&apos;][&apos;extension&apos;]) //https://api.excelleris.com/1.0/eorder/diagnosticorder-item-code-mnemonic
					{
						logger.debug(&quot;----get non-profile tests: &quot; + entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;]);
						inHL7[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;] = entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;]; //test code ex:27156
						inHL7[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;] = entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;code&apos;][&apos;text&apos;]; //desc ex: SODIUM
						inHL7[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.3&apos;] = entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;code&apos;][&apos;extension&apos;][0][&apos;valueString&apos;]; //mnemonic ex: NA
					}
					//get profile tests
					else if (entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;code&apos;][&apos;coding&apos;][0][&apos;extension&apos;])
					{
						if (entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;code&apos;][&apos;coding&apos;][0][&apos;extension&apos;][0][&apos;url&apos;].toString().trim() == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-item-code-coding-profileMnemonic&quot;)
						{ 
							logger.debug(&quot;--------get profile tests&quot;);
							inHL7[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.1&apos;] = entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;code&apos;][&apos;coding&apos;][0][&apos;code&apos;]; //test code ex:27156
							inHL7[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.2&apos;] = entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;code&apos;][&apos;text&apos;]; //desc ex: SODIUM
							inHL7[&apos;OBR&apos;][&apos;OBR.4&apos;][&apos;OBR.4.3&apos;] = entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;code&apos;][&apos;coding&apos;][0][&apos;extension&apos;][0][&apos;valueString&apos;]; //mnemonic ex: NA
						}
					}
		
					//obr-7 observation date time 
					//logger.debug(&quot;OBR7&quot;);
					inHL7[&apos;OBR&apos;][&apos;OBR.7&apos;][&apos;OBR.7.1&apos;] =  GetHL7DateFromISO(extCollectionDate, &quot;yyyyMMddHHmmssZZZZ&quot;); 
					//inFHIR could contain &quot;M&quot; or &quot;PP&quot;
					inHL7[&apos;OBR&apos;][&apos;OBR.23&apos;][&apos;OBR.23.1&apos;] = entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;extension&apos;][0][&apos;valueString&apos;]; //https://api.excelleris.com/1.0/eorder/diagnosticorder-item-payertype

					//from practitioner resource
					if (PractitionerRes.length &gt;= 1)
					{
						for each(entryPractitionerRes in PractitionerRes)
						{
							if (entryPractitionerRes[&apos;practitionerRole&apos;]){
							if (entryPractitionerRes[&apos;practitionerRole&apos;][0][&apos;role&apos;][&apos;coding&apos;][0][&apos;code&apos;] == &quot;doctor&quot;)
							{
								var practitionerID = GetPractitionerID(PractitionerRes, entryDiagnosticOrderRes.orderer.reference);
								if (practitionerID)
								{
									inHL7[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.1&apos;] = practitionerID;
								}
								var practitionerName = GetPractitionerName(PractitionerRes, entryDiagnosticOrderRes.orderer.reference);
								if (practitionerName)
								{	
									inHL7[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.2&apos;] = practitionerName.family;
									inHL7[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.3&apos;] = practitionerName.given;
									inHL7[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.6&apos;] = practitionerName.prefix?practitionerName.prefix:&quot;&quot;;
									inHL7[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.13&apos;] = &quot;MDL&quot;;
								}
								
								//assigning jurisdiction
								inHL7[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.22&apos;][&apos;OBR.16.22.1&apos;] = &quot;BC&quot;;
								inHL7[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.22&apos;][&apos;OBR.16.22.2&apos;] = &quot;BRITISH COLUMBIA&quot;;
								inHL7[&apos;OBR&apos;][&apos;OBR.16&apos;][&apos;OBR.16.22&apos;][&apos;OBR.16.22.3&apos;] = &quot;HL70347&quot;;

								//test level claim type M,A,PP,O intRlab
								//test status: &apos;,O,I,P,A,F,C,X,E&apos;
								inHL7[&apos;OBR&apos;][&apos;OBR.25&apos;][&apos;OBR.25.1&apos;] = GetTestStatus(&quot;I&quot;);								
								
							}
							}
						}
					}//end of practitioner 

					//assign extensions to HL7	
					//quantity/timing - required
					var frequency = entryDiagnosticOrderRes.extension.getByUrl(&quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-standingorderfrequency&quot;);
					if (frequency) 
					{
						inHL7[&apos;OBR&apos;][&apos;OBR.27&apos;][&apos;OBR.27.1&apos;][&apos;OBR.27.1.1&apos;] = frequency.valueString;
					} else
					{
						inHL7[&apos;OBR&apos;][&apos;OBR.27&apos;][&apos;OBR.27.1&apos;][&apos;OBR.27.1.1&apos;] = &quot;1&quot;;	
					}
									
					inHL7[&apos;OBR&apos;][&apos;OBR.27&apos;][&apos;OBR.27.4&apos;] =  GetHL7DateFromISO(extServiceDate, &quot;yyyyMMddHHmmssZ&quot;);
					var expiry = entryDiagnosticOrderRes.extension.getByUrl(&quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-standingorderexpirydate&quot;)
					if (expiry){
						inHL7[&apos;OBR&apos;][&apos;OBR.27&apos;][&apos;OBR.27.5&apos;] = GetHL7DateFromISO(expiry.valueDateTime, &quot;yyyyMMddHHmmssZ&quot;);
					}
					
					//priority: R, SN, SF, SFN, RN, RFN, RF, RFN
					if (entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;extension&apos;][1].url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-item-priority&quot;)
					{
						//logger.debug(&quot;....Found item priority...&quot; + entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;extension&apos;][1].valueString)
						for each(itemContactPoint in entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;extension&apos;])
						{
							if (itemContactPoint.url == &quot;https://api.excelleris.com/1.0/eorder/eorder-item-contactpoint&quot;)
							{
								//logger.debug(&quot;....found item contact point...: &quot; + JSON.stringify(itemContactPoint.valueContactPoint)); 
								inHL7[&apos;OBR&apos;][&apos;OBR.27&apos;][&apos;OBR.27.6&apos;] = GetTestPriorityContactPoint(entryDiagnosticOrderRes[&apos;item&apos;][x][&apos;extension&apos;][1].valueString, itemContactPoint.valueContactPoint.system);
							}
						}
					}
					//copy to patient - OBR-28 repeats.
					logger.debug(&quot;Create this many OBR-28 copy to segements: &quot; + cntCopyTo);
					var repeatingOBR          = &quot;&quot;;
					var foundPatient 	      = false;
					var firstPractitionerLoop = false;

					//do we have copyto patients?
					if (extCopyToPatientUID)
					{
						logger.debug(&quot;YES we have PATIENTS to Copy To&quot;);
						
						foundPatient = true;
						//copy to patient
						repeatingOBR += entryPatientRes[&apos;identifier&apos;][0][&apos;type&apos;][&apos;coding&apos;][0][&apos;code&apos;] + &quot;^&quot;; //OBR-28.1
						repeatingOBR += entryPatientRes[&apos;name&apos;][0][&apos;family&apos;] + &quot;^&quot;; //OBR-28.2
						repeatingOBR += entryPatientRes[&apos;name&apos;][0][&apos;given&apos;] + &quot;^&quot;; //OBR-28.3
						repeatingOBR += &quot;^&quot;; //OBR-28.4
						repeatingOBR += &quot;^&quot;; //OBR-28.5
						repeatingOBR += &quot;^&quot;; //OBR-28.6
						repeatingOBR += &quot;^&quot;; //OBR-28.7
						repeatingOBR += &quot;^&quot;; //OBR-28.8
						repeatingOBR += &quot;^&quot;; //OBR-28.9
						repeatingOBR += &quot;^&quot;; //OBR-28.10
						repeatingOBR += &quot;^&quot;; //OBR-28.11
						repeatingOBR += &quot;^&quot;; //OBR-28.12
						repeatingOBR += &quot;ANON&quot; + &quot;^&quot;; //OBR-28.13
						repeatingOBR += &quot;^^^^^^^^&quot;; //OBR-28.15 thru OBR-28.21
						repeatingOBR += &quot;BC&amp;BRITISH COLUMBIA&amp;HL70347&quot;; //OBR-28.22
					}//end of patient copyto
				
					//do we practitioner copyto ?
					if (extCopyToRecipientUIDs.length &gt; 0)
					{
						if (foundPatient == true)
						{
							repeatingOBR+= &quot;~&quot;;
							cntCopyTo = cntCopyTo - 1; 
						}
						
						 //
						 //loop through and create repeating OBR.28 field
						for (var cnt = 0; cnt &lt;  cntCopyTo; cnt++)
						{
							//copy to practitioners
							var practitionerID = GetPractitionerID(PractitionerRes, extCopyToRecipientUIDs[cnt]);
							if (practitionerID)
							{
								repeatingOBR += practitionerID + &quot;^&quot;; //OBR-28.1
							}
								var practitionerName = GetPractitionerName(PractitionerRes, extCopyToRecipientUIDs[cnt]);
								if (practitionerName)
								{
									repeatingOBR += practitionerName.family + &quot;^&quot;; //OBR-28.2
									repeatingOBR += practitionerName.given + &quot;^&quot;; //OBR-28.3
									repeatingOBR += &quot;^&quot;; //OBR-28.4
									repeatingOBR += &quot;^&quot;; //OBR-28.5
									repeatingOBR += (practitionerName.prefix?practitionerName.prefix:&quot;&quot;) + &quot;^&quot;; //OBR-28.6
									repeatingOBR += &quot;^&quot;; //OBR-28.7
									repeatingOBR += &quot;^&quot;; //OBR-28.8
									repeatingOBR += &quot;^&quot;; //OBR-28.9
									repeatingOBR += &quot;^&quot;; //OBR-28.10
									repeatingOBR += &quot;^&quot;; //OBR-28.11
									repeatingOBR += &quot;^&quot;; //OBR-28.12
									repeatingOBR += &quot;MDL&quot; + &quot;^&quot;; //OBR-28.13
									repeatingOBR += &quot;^^^^^^^^&quot;; //OBR-28.15 thru OBR-28.21
									repeatingOBR += &quot;BC&amp;BRITISH COLUMBIA&amp;HL70347&quot;; //OBR-28.22
								}
								repeatingOBR+= &quot;~&quot;;
						}
					} //end of  practitioner copy to
 

					//make sure the repeating field doesn&apos;t end with repeating char
					//causes issue with empty OBR.28 in repeating.
					if (repeatingOBR.charAt(repeatingOBR.length-1) == &quot;~&quot;)
					{
						//logger.debug(&quot;Found repeating at end...remove! &quot; + 	repeatingOBR);
						repeatingOBR = repeatingOBR.substring(0, repeatingOBR.length - 1);
					}
					
					//assign repeating field values to OBR-28
					inHL7[&apos;OBR&apos;][&apos;OBR.28&apos;] = repeatingOBR;

					
	
					//grab current segment
					curORMXML.appendChild(new XML(inHL7[&apos;OBR&apos;]));
					//logger.debug(&quot;OBR added&quot;);

					//ZBR -  required Observeration Request Extension Segment
					//test request placer
					inHL7[&apos;ZBR&apos;][&apos;ZBR.2&apos;][&apos;ZBR.2.1&apos;] = &quot;LIFELABS&quot;;
					inHL7[&apos;ZBR&apos;][&apos;ZBR.2&apos;][&apos;ZBR.2.6&apos;][&apos;ZBR.2.6.2&apos;] = &quot;2.16.840.1.113883.3.1863:9999&quot;;
					inHL7[&apos;ZBR&apos;][&apos;ZBR.2&apos;][&apos;ZBR.2.6&apos;][&apos;ZBR.2.6.3&apos;] = &quot;ISO&quot;;

					//default/accesion level claim type: M,A,PP,O
					inHL7[&apos;ZBR&apos;][&apos;ZBR.13&apos;] = extPayerType;
							
					if (entryDiagnosticOrderRes.priority)
					{
						//logger.debug(&quot;found default priority type: &quot; + entryDiagnosticOrderRes.priority);
						//deault/accession level priority: R,RF,RFN,RN,SF,SFN,SN
						
						if (extContactPointSystem.length == 0)
						{
							inHL7[&apos;ZBR&apos;][&apos;ZBR.14&apos;] = &quot;R&quot;;
						}
						else if (extContactPointSystem.length &gt; 0)
						{
							inHL7[&apos;ZBR&apos;][&apos;ZBR.14&apos;] = GetTestPriorityContactPoint(entryDiagnosticOrderRes.priority, extContactPointSystem);	
						}
						
					}
					else
					{
						inHL7[&apos;ZBR&apos;][&apos;ZBR.14&apos;] = &quot;R&quot;;
					}

					//Only map ZBR.16 Priority Instructions If Fax or Notify priority is indicated in ZBR.14
					if (inHL7[&apos;ZBR&apos;][&apos;ZBR.14&apos;] != &quot;R&quot;)
					{
	
						if (extContactPointSystem.length &gt; 0 &amp;&amp; 
						    extContactPointSystem.toUpperCase() == &quot;PHONE&quot;)
						{
							inHL7[&apos;ZBR&apos;][&apos;ZBR.15&apos;] = &quot;N1&quot;;
							inHL7[&apos;ZBR&apos;][&apos;ZBR.16&apos;][&apos;ZBR.16.1&apos;] = &quot;N1&quot;;
						}
						else if (extContactPointSystem.length &gt; 0 &amp;&amp; 
						    extContactPointSystem.toUpperCase() == &quot;FAX&quot;)
						{
							inHL7[&apos;ZBR&apos;][&apos;ZBR.15&apos;] = &quot;F1&quot;;
							inHL7[&apos;ZBR&apos;][&apos;ZBR.16&apos;][&apos;ZBR.16.1&apos;] = &quot;F1&quot;;
						}
	
	
						//Practitioner Name. 
						var PractitionerName = GetPractitionerName(PractitionerRes, entryDiagnosticOrderRes.orderer.reference);
						if (PractitionerName)
						{
							inHL7[&apos;ZBR&apos;][&apos;ZBR.16&apos;][&apos;ZBR.16.2&apos;] =  (PractitionerName.prefix?PractitionerName.prefix+ &quot; &quot;:&quot;&quot;)   + PractitionerName.given + &quot; &quot; + PractitionerName.family; 
						}
	
						//
						//zbr-16.3 - 16.6 ITEM level valueContactPoint.
						//
						for each(itemTest in entryDiagnosticOrderRes.item[x].extension)
						{
							if (itemTest.url == &quot;https://api.excelleris.com/1.0/eorder/eorder-item-contactpoint&quot;)
							{
								inHL7[&apos;ZBR&apos;][&apos;ZBR.16&apos;][&apos;ZBR.16.3&apos;] = (itemTest.valueContactPoint.value != undefined) ? itemTest.valueContactPoint.value : &quot;&quot;;
								inHL7[&apos;ZBR&apos;][&apos;ZBR.16&apos;][&apos;ZBR.16.4&apos;] = GetTestLevelSystem(itemTest.valueContactPoint.system);
								
								for each(valuePointExt in itemTest.valueContactPoint.extension)
								{
									if (valuePointExt.url == &quot;https://api.excelleris.com/1.0/eorder/eorder-item-contactpointInstruction&quot;)
									{
										logger.debug(&quot;16.5...&quot; + valuePointExt.valueString);
										inHL7[&apos;ZBR&apos;][&apos;ZBR.16&apos;][&apos;ZBR.16.5&apos;] = (valuePointExt.valueString != undefined) ? valuePointExt.valueString : &quot;&quot;;
									}
								}
								for each(valuePointExt in itemTest.valueContactPoint.extension)
								{
									if (valuePointExt.url == &quot;https://api.excelleris.com/1.0/eorder/eorder-item-contactpointAfterhoursphone&quot;)
									{
										logger.debug(&quot;16.6...&quot; + valuePointExt.valueString);
										inHL7[&apos;ZBR&apos;][&apos;ZBR.16&apos;][&apos;ZBR.16.6&apos;] = (valuePointExt.valueString != undefined) ? valuePointExt.valueString : &quot;&quot;;
									}
								}

							}
						}//end of valueContactPoint loop

					}				
					inHL7[&apos;ZBR&apos;][&apos;ZBR.17&apos;] = extSupplementalLabels;
					inHL7[&apos;ZBR&apos;][&apos;ZBR.18&apos;] = GetEHealthLabel(extMyEHealth);
					
					//will contain actual codes
					inHL7[&apos;ZBR&apos;][&apos;ZBR.19&apos;] = extStatTransportMode;
					
					if (extStatETA)
					{
						inHL7[&apos;ZBR&apos;][&apos;ZBR.20&apos;] = GetHL7DateFromISO(extStatETA, &quot;yyyyMMddHHmmssZZZZ&quot;);
					}
					inHL7[&apos;ZBR&apos;][&apos;ZBR.21&apos;] = extStatSpun;
					
					
					//grab current segment
					curORMXML.appendChild(new XML(inHL7[&apos;ZBR&apos;]));
					//logger.debug(&quot;ZBR added&quot;);

					//Item Level NTE/ZNT pair         
		
				
				logger.debug(entryDiagnosticOrderRes.item[x].code.text);
				//if a canned comment was used then pass that in NTE.3, otherwise just send the free text
				function isNote(value){					
					return value.url == &quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/Note&quot;;
				}
				var  itemNotes = entryDiagnosticOrderRes[&apos;item&apos;][x].extension.filter(isNote);
				
				
				for each (note in itemNotes){
					logger.debug(&quot;adding item level comment&quot;);
				    inHL7[&apos;NTE&apos;] = new XML(&quot;&lt;NTE&gt;&lt;/NTE&gt;&quot;);
				    inHL7[&apos;NTE&apos;][&apos;NTE.1&apos;][&apos;NTE.1.1&apos;] = 1;
				    inHL7[&apos;NTE&apos;][&apos;NTE.2&apos;][&apos;NTE.2.1&apos;] = &quot;L&quot;;	

				    var theValueAnnotation = note.valueAnnotation;
				    //use the canned comment code if you have one otherwise use the annotation text
				    if (theValueAnnotation.extension.getByUrl(&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/CannedComment&quot;))
				    {
				    	   inHL7[&apos;NTE&apos;][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] = theValueAnnotation.extension.getByUrl(&quot;https://api.excelleris.com/1.0/eorder/StructureDefinition/CannedComment&quot;).valueCode.toUpperCase();
				    } else {
				    	   inHL7[&apos;NTE&apos;][&apos;NTE.3&apos;][&apos;NTE.3.1&apos;] = theValueAnnotation.text.replace(/\r\n/g, &apos;\\.br\\&apos;).toUpperCase();
				    }
				    inHL7[&apos;NTE&apos;][&apos;NTE.4&apos;][&apos;NTE.4.1&apos;] = &quot;RE&quot;;
				    inHL7[&apos;NTE&apos;][&apos;NTE.4&apos;][&apos;NTE.4.2&apos;] = &quot;REMARKS&quot;;
				    inHL7[&apos;NTE&apos;][&apos;NTE.4&apos;][&apos;NTE.4.3&apos;] = &quot;LIFELABS&quot;;

				    inHL7[&apos;ZNT&apos;] = new XML(&quot;&lt;ZNT&gt;&lt;/ZNT&gt;&quot;);
				    //grab current segment
				    curORMXML.appendChild(new XML(inHL7[&apos;NTE&apos;]));
	
				    //grab current segment
				    curORMXML.appendChild(new XML(inHL7[&apos;ZNT&apos;]));
				} 	
				
				 
					//
					//OBX - Observation 
					//ZBX - Observation Extension
					//
					//reset pre-reportable counter
					cntPreReportables = 1;
					
					//get pre-reportables
					for each(prereportableRef in entryDiagnosticOrderRes.item[x].extension)
					{
						//logger.debug(&quot;found extension array. url: &quot; + JSON.stringify(url)); 
						if (prereportableRef.url == &quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-item-supportinginformation&quot;)
						{
							inHL7[&apos;OBX&apos;][&apos;OBX.1&apos;][&apos;OBX.1.1&apos;] = cntPreReportables;
							inHL7[&apos;ZBX&apos;] = &quot;|&quot;;
							if (prereportableRef.valueReference)
							{
								//go through contained and find details that belongs to refPrereportableID 
								for each (prereportable in entryDiagnosticOrderRes.contained)
								{
									//logger.debug(&quot;contained id: &quot; + JSON.stringify(prereportable.id));
									if (prereportable.id == prereportableRef.valueReference.reference)
									{
								 		for each(coding in prereportable.code)
								 		{
								 			//logger.debug(&quot;found code! &quot; + JSON.stringify(coding[0].code));
								 			//logger.debug(&quot;found display! &quot; + JSON.stringify(coding[0].display));
								 			inHL7[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;] = coding[0].code;
											inHL7[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;] = coding[0].display;
								 		}
										
										//inHL7[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.1&apos;] = &quot;coding&quot;;
										//inHL7[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.2&apos;] = &quot;display&quot;;
										
										inHL7[&apos;OBX&apos;][&apos;OBX.3&apos;][&apos;OBX.3.3&apos;] = &quot;HL7902&quot;;
										inHL7[&apos;OBX&apos;][&apos;OBX.5&apos;][&apos;OBX.5.1&apos;] = prereportable.valueString;
										inHL7[&apos;OBX&apos;][&apos;OBX.11&apos;] 		   = &quot;F&quot;;
										inHL7[&apos;OBX&apos;][&apos;OBX.14&apos;]           = GetHL7Date(new Date().toISOString());
										cntPreReportables++;
									}
								}
								//grab current segment
								curORMXML.appendChild(new XML(inHL7[&apos;OBX&apos;]));
								curORMXML.appendChild(new XML(inHL7[&apos;ZBX&apos;]));
							}
						}	
					}
				
					
					//BLG -billing
					//https://api.excelleris.com/1.0/eorder/diagnosticorder-item-payertype&quot; extension is required.  If it is missing the mapper will 
					if (entryDiagnosticOrderRes.item[x].extension.getByUrl(&quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-item-payertype&quot;).valueString.match(/(^|\W)(C|CF|D|ICBC|RCMP|REF|W|A)($|\W)/)){
						logger.debug(&quot;looking for other ID&quot;);
						inHL7[&apos;BLG&apos;][&apos;BLG.3&apos;][&apos;BLG.3.1&apos;] = entryDiagnosticOrderRes.item[x].extension.getByUrl(&quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-item-otheridnum&quot;).valueString;
					} else {
					 	inHL7[&apos;BLG&apos;][&apos;BLG.3&apos;][&apos;BLG.3.1&apos;] = &quot;SELF&quot;;
					}

				
					curORMXML.appendChild(new XML(inHL7[&apos;BLG&apos;]));
					//logger.debug(&quot;BLG added&quot;);
		
				}//end of test loop
			}//end of diagnosticorder loop
		
		}//end of diagnostic 
		}//end of ORC,OBR,OBX

	//return HL7 ORM
	logger.debug(&quot;curORMXML:&quot; + SerializerFactory.getSerializer(&apos;HL7V2&apos;).fromXML(curORMXML).toString());	
	return SerializerFactory.getSerializer(&apos;HL7V2&apos;).fromXML(curORMXML);
}
catch(err)
{
	logger.error(&quot;PROBLEM with converting to HL7:&quot; + err);
	throw(err);
}	
}

function getAction()
{
	
	var action = &quot;&quot;;
	var httpRequestMethod = globalMap.get(&apos;httpRequestMethod&apos;);

	var action = {
		&apos;PUT&apos;: function(){ 
		 	return &quot;XO&quot;;
		 },
		 &apos;DELETE&apos;: function(){
		 	return &quot;CA&quot;;
		 },
		 &apos;Default&apos;: function(){
		 	return &quot;NW&quot;;
		 }
	};
	
	logger.debug( typeof(httpRequestMethod));
	logger.debug(&quot;getAction:&quot; + httpRequestMethod);

	logger.debug(httpRequestMethod.toString() == &apos;DELETE&apos;);

	if (action[httpRequestMethod]){
	    return action[httpRequestMethod]();
	} else {
	   return action.Default();
	}
	   
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>4392abf5-9d25-4d65-b54d-17dbd75b2a0f</id>
            <name>FHIR Translations  (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202737597</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	FHIR Translations.

	@param {Any} inPID8 - 
	@return {String} return FHIR code
*/
//https://www.hl7.org/fhir/2015May/administrative-gender.html
function GetFHIRGender(inPID8)
{
	if (inPID8.toString().toUpperCase().trim() == &quot;M&quot;)
	{
		 return &quot;male&quot;;
	}
	else if (inPID8.toString().toUpperCase().trim() == &quot;F&quot;)
	{
		return &quot;female&quot;;
	}
	else if (inPID8.toString().toUpperCase().trim() == &quot;U&quot;)
	{
		return &quot;unknown&quot;;
	}
	
	return &quot;unknown&quot;;
}

//http://hl7.org/fhir/valueset-contact-point-system.html
function GetFHIRTelecomSystem(inPID13)
{
	//PID-13.3
	if (inPID13.toString().toUpperCase().trim() == &quot;PH&quot;) //Telephone
	{
		return &quot;phone&quot;;
	}
	else if (inPID13.toString().toUpperCase().trim() == &quot;FX&quot;) //Fax
	{
		return &quot;fax&quot;;
	}
	else if (inPID13.toString().toUpperCase().trim() == &quot;CP&quot;) //Cellular Phone
	{
		return &quot;phone&quot;;
	}
	else if (inPID13.toString().toUpperCase().trim() == &quot;BP&quot;) //Beeper
	{
		return &quot;page&quot;;		
	}
	else if (inPID13.toString().toUpperCase().trim() == &quot;Internet&quot;) //Internet Address: Use Only If Telecommunication Use Code Is NET
	{
		return &quot;email&quot;;
	}
	return &quot;phone&quot;;
}

//http://hl7.org/fhir/valueset-contact-point-use.html
function GetFHIRTelecomUse(inPID13)
{
	//PID-13.2
	if (inPID13.toString().toUpperCase().trim() == &quot;PRN&quot;) //Primary Residence Number
	{
		return &quot;home&quot;;
	}
	if (inPID13.toString().toUpperCase().trim() == &quot;ORN&quot;) //Other Residence Number
	{
		return &quot;home&quot;;
	}
	if (inPID13.toString().toUpperCase().trim() == &quot;VHN&quot;) //Vacation Home Number
	{
		return &quot;home&quot;;
	}
	if (inPID13.toString().toUpperCase().trim() == &quot;WPN&quot;) //Work Number
	{
		return &quot;work&quot;;
	}
	if (inPID13.toString().toUpperCase().trim() == &quot;ASN&quot;) //Answering Service Number
	{
		return &quot;temp&quot;;
	}
	if (inPID13.toString().toUpperCase().trim() == &quot;EMR&quot;) //Emergency Number
	{
		return &quot;temp&quot;;
	}
	if (inPID13.toString().toUpperCase().trim() == &quot;NET&quot;) //Network (email) Address
	{
		return &quot;mobile&quot;;
	}
	if (inPID13.toString().toUpperCase().trim() == &quot;BPN&quot;) //Beeper Number&#xd;
	{
		return &quot;mobile&quot;;
	}
	return &quot;home&quot;;
}

//https://www.hl7.org/fhir/valueset-address-use.html
function GetFHIRAddressUse(inPID11)
{
	//PID-11.7
	if (inPID11.toString().toUpperCase().trim() == &quot;M&quot;) //Mailing&#xd;
	{
		return &quot;home&quot;;
	}
	if (inPID11.toString().toUpperCase().trim() == &quot;B&quot;) //Firm/Business&#xd;
	{
		return &quot;work&quot;;
	}
	if (inPID11.toString().toUpperCase().trim() == &quot;O&quot;) //Office&#xd;
	{
		return &quot;work&quot;;
	}
	if (inPID11.toString().toUpperCase().trim() == &quot;H&quot;) //Home&#xd;
	{
		return &quot;home&quot;;
	}
	if (inPID11.toString().toUpperCase().trim() == &quot;E&quot;) //Emergency Contact Address&#xd;
	{
		return &quot;temp&quot;;
	}
	return &quot;home&quot;;
	
}

//May not need. IntRLabs days deprecated.
function GetFHIRDeathIndicator(inPID30)
{
	
	if (inPID30.toString().toUpperCase().trim() == &quot;Y&quot;) //Yes
	{
		return &quot;true&quot;;
	}
	else if (inPID30.toString().toUpperCase().trim() == &quot;N&quot;) //No
	{
		return &quot;false&quot;;
	}
	return false;
	
}

//inPID7 = YYYYMMDD
function GetDOB(inPID7)
{	
	var dtMonth = inPID7.substring(4,6);
	var dtDay   = inPID7.substring(6);
	var dtYear  = inPID7.substring(0,4);
	var dtFormatted = dtYear + &quot;-&quot; + dtMonth + &quot;-&quot; + dtDay;
	
	return dtFormatted;
}

//Converts date ISO 8601
//inPID7 = YYYYMMDD
function GetISODate(inDateStr)
{
	var dtMonth = inDateStr.substring(4,6) - 1;
	var dtDay   = inDateStr.substring(6);
	var dtYear  = inDateStr.substring(0,4);

	//new Date(birth_year, birth_month-1, birth_day, hours, mins, sec);
	
	//var dtISO = new Date(parseInt(inDateStr));
	
	var dtISO = new Date(dtYear, dtMonth, dtDay);
	logger.info(&quot;HL7 to date: &quot; + dtISO);
	logger.info(&quot;HL7 to ISO Date: &quot; + dtISO.toISOString());

	//logger.info(&quot;In GetISODate: &quot; + dtISO.toISOString());
	return dtISO;
}

//20090817091500-0400 (-+ZZZZ) is time zone

//ex:  63993.154-63987.61706.182606
function GetTimeFromMSH(inMSH10)
{
	var arrMSH = inMSH10.toString().split(&quot;-&quot;);
	
	if(arrMSH.length == 2)
	{
	  return arrMSH[1];
	}

	return &quot;&quot;;
}


//@return FHIR name object
function GetPractitionerName(inFHIRResourceArray, inResourceFullURL)
{
	 //logger.debug(&quot;In GetPractitionerName searching for ID: &quot; + JSON.stringify(inResourceFullURL));
				
	try
	{
		for each (resource in  inFHIRResourceArray)
		{
			if (resource.resourceType == &quot;Practitioner&quot;)
			{
				if (resource.fullUrl.trim() == inResourceFullURL.trim())
				{
					//logger.debug(&quot;FOUND PRACTitioner IN ARRAY. FULL URL: &quot; + JSON.stringify(resource.fullUrl));
					//logger.debug(&quot;RETURNING docotor name : &quot; + JSON.stringify(resource.name));
					return resource.name;
				}
			}
		}
		return &quot; &quot;;
	}
	catch(err)
	{
		return &quot; &quot;;
	}
}

//@return practitioner id string
function GetPractitionerID(inFHIRResourceArray, inResourceFullURL)
{
	//logger.debug(&quot;In GetPractitionerID searching for ID: &quot; + JSON.stringify(inResourceFullURL));
				
	try
	{
		for each (resource in  inFHIRResourceArray)
		{
			//logger.debug(&quot;FOUNR fullURL: &quot; + JSON.stringify(resource.fullURL));
	
			if (resource.fullUrl == inResourceFullURL)
			{
				//logger.debug(&quot;FOUNR fullURL: &quot; + JSON.stringify(inResourceFullURL));
	
				if (resource.resourceType == &quot;Practitioner&quot;)
				{
					for each(identifier in resource.identifier)
					{
						//logger.debug(&quot;identifier: &quot; +  JSON.stringify(identifier));
						if (identifier.use.trim() == &quot;official&quot;)
						{
							//logger.debug(&quot;FOUND PRACTitioner value &quot; + JSON.stringify(identifier.value));
							return identifier.value;
						}	
					}
				}
			}
		}
		return &quot; &quot;;
	}
	catch(err)
	{
		logger.error(&quot;ERROR getting practioner UID in GetPractitionerID(): &quot; + err);
		return &quot; &quot;;
	}
}


//
function GetPatientAddress(inFHIRPatientRes)
{
	try
	{
		for each (resource in  inFHIRPatientRes)
		{
			if (resource.resourceType == &quot;Practitioner&quot;)
			{
				for each(address in resource.address)
				{
					if (address.use.trim() == &quot;home&quot;)
					{
						return address;
					}
				}
			}
		}
	}
	catch(err)
	{
		logger.error(&quot;ERROR getting patient UID in GetPatientAddress(): &quot; + err);
		
		return &quot; &quot;;
	}
}

function GetFHIRTestPriority(inHL7Priority)
{
	//R   = Routine
	//RF  = Routine Fax
	//RN  = Routine/Notify
	//RFN = Routine Fax and Notify 
	//SF  = Stat/Fax
	//SFN = Stat/Fax and Notify
	//SN  = Stat Notify
	//S   = Stat
	
	if (inHL7Priority.toString().trim().toUpperCase() == &quot;R&quot;)
	{
		return &quot;routine&quot;;
	}
	else if (inHL7Priority.toString().trim().toUpperCase() == &quot;SN&quot;)
	{
		return &quot;stat order&quot;;
	}
	else if (inHL7Priority.toString().trim().toUpperCase() == &quot;SFN&quot;)
	{
		return &quot;stat phone&quot;;
	}
	else if (inHL7Priority.toString().trim().toUpperCase() == &quot;SF&quot;)
	{
		return &quot;stat fax&quot;;
	}
	else if (inHL7Priority.toString().trim().toUpperCase() == &quot;RN&quot;)
	{
		return &quot;phone&quot;; //RN, RFN
	}
	else if (inHL7Priority.toString().trim().toUpperCase() == &quot;RF&quot;)
	{
		return &quot;fax&quot;; //RF, RFN
	}
	else if (inHL7Priority.toString().trim().toUpperCase() == &quot;SN&quot;)
	{
		return &quot;stat notify&quot;; //SN, SF, SFN
	}
	else if (inHL7Priority.toString().trim().toUpperCase() == &quot;S&quot;)
	{
		return &quot;stat&quot;; //S
	}
	 
	//if all else fails...
	return &quot;routine&quot;;
}

//OBR-27.6
function GetFHIRItemTestPriority(inHL7Priority, inArrExtension)
{
	//R   = routine
	//RF  = routine / fax
	//RN  = routine / phone
	//SF  = stat / fax
	//SN  = stat / phone
	
	//logger.debug(&quot;IN GetTestPriorityContactPoint----&quot; + inHL7Priority);
	
	if (inHL7Priority.toString().trim().toUpperCase() == &quot;R&quot; ||
	    inHL7Priority.toString().trim().toUpperCase() == &quot;RF&quot; ||
	    inHL7Priority.toString().trim().toUpperCase() == &quot;RN&quot;)
	{
		inArrExtension[inArrExtension.length] = {&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-item-priority&quot;,&quot;valueString&quot;:&quot;routine&quot;};
	}
	else if (obrSeg[&apos;OBR.27&apos;][&apos;OBR.27.6&apos;].toString().trim() != &quot;SF&quot; ||
	         obrSeg[&apos;OBR.27&apos;][&apos;OBR.27.6&apos;].toString().trim() != &quot;SN&quot;)
	{
		inArrExtension[inArrExtension.length] = {&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-item-priority&quot;,&quot;valueString&quot;:&quot;stat&quot;};
	}
	
	return inArrExtension;
}

//OBR-27.6
function GetFHIRItemTestContactPoint(inSeg, inArrExtension)
{
	//R   = routine
	//RF  = routine / fax
	//RN  = routine / phone
	//SF  = stat / fax
	//SN  = stat / phone
	
	//logger.debug(&quot;IN GetFHIRItemTestContactPoint----&quot; + inSeg[&apos;ZBR.16&apos;]);
	
	//eorder-item-contactpoint
	var arrItemVCPExtension = new Array();
	arrItemVCPExtension[0] = {&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/eorder-item-contactpointInstruction&quot;, &quot;valueString&quot;: inSeg[&apos;ZBR.16&apos;][&apos;ZBR.16.5&apos;]};
	
	//if HL7 contains second number
	if (inSeg[&apos;ZBR.16&apos;][&apos;ZBR.16.6&apos;].toString().trim() != &quot;&quot;)
	{
		arrItemVCPExtension[1] = {&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/eorder-item-contactpointAfterhoursphone&quot;, &quot;valueString&quot;: inSeg[&apos;ZBR.16&apos;][&apos;ZBR.16.6&apos;]};
	}
	var objItemVCP = {&quot;extension&quot;:arrItemVCPExtension };

	if (inSeg[&apos;ZBR.16&apos;][&apos;ZBR.16.3&apos;].toString().trim().toUpperCase() == &quot;N&quot;)
	{
		objItemVCP.system = &quot;phone&quot;;
	}
	else if (inSeg[&apos;ZBR.16&apos;][&apos;ZBR.16.3&apos;].toString().trim().toUpperCase() == &quot;F&quot;)
	{
		objItemVCP.system = &quot;fax&quot;;
	}
	
	objItemVCP.value  = inSeg[&apos;ZBR.16&apos;][&apos;ZBR.16.4&apos;];
	
	var objItemExtensionCP = new Object();
	objItemExtensionCP.url = &quot;https://api.excelleris.com/1.0/eorder/eorder-item-contactpoint&quot;;
	objItemExtensionCP.valueContactPoint = objItemVCP;

	inArrExtension[inArrExtension.length] = objItemExtensionCP;
	 
	return inArrExtension;
}


//1=yes, 0=no
function GetFHIREHealthLabel(inValue)
{
	try
	{
		if (inValue == &quot;1&quot;)
		{
			return true;
		}
		else
		{
			return false;
		}
		
	}
	catch(err)
	{
		return false;
	}
}

//Creates a JSON array with data specific to an order/accession test.
//@param {HL7/XML} inHL7  
//@return {JSON} array
function CreateDiagnoticOrderItemArray(inHL7Segment)
{
	try
	{
	var itemTestsArray = new Object();

	var itemTestsArrayExtension = [
	{&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-item-payerType&quot;, &quot;valueString&quot;: &quot;&quot; }, 
	{&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-item-priority&quot;, &quot;valueString&quot;:  &quot;&quot; } 
	];
	itemTestsArrayExtension[0][&apos;valueString&apos;] = inHL7Segment[&apos;OBR.23&apos;][&apos;OBR.23.1&apos;]; //mnemonic
	itemTestsArrayExtension[1][&apos;valueString&apos;] = GetFHIRTestPriority(inHL7Segment[&apos;OBR.27&apos;][&apos;OBR.27.6&apos;]); //test code ex:27156
	
	//item.code.coding
	var itemTestsArrayCoding = [
	{&quot;system&quot;:&quot;&quot;, &quot;code&quot;: &quot;&quot;}
	];
	itemTestsArrayCoding[0][&apos;system&apos;] = &quot;Intrlab&quot;;
	itemTestsArrayCoding[0][&apos;code&apos;]   = inHL7Segment[&apos;OBR.4&apos;][&apos;OBR.4.1&apos;];
	
	var itemTestsArrayCode 	 = new Object();
	itemTestsArrayCode.coding = itemTestsArrayCoding 
	
	itemTestsArrayCode.extension = [
	{&quot;url&quot;:&quot;https://api.excelleris.com/1.0/eorder/diagnosticorder-item-code-mnemonic&quot;, &quot;valueString&quot;:&quot;&quot;}
	];
	itemTestsArrayCode.extension[0][&apos;valueString&apos;] = inHL7Segment[&apos;OBR.4&apos;][&apos;OBR.4.3&apos;]; //mnemonic
	
	itemTestsArrayCode.text =  inHL7Segment[&apos;OBR.4&apos;][&apos;OBR.4.2&apos;]; //desc ex: SODIUM
	
	//assign extension and code to main array
	itemTestsArray.extension = itemTestsArrayExtension ;
	itemTestsArray.code = itemTestsArrayCode;

	//return json array	
	return  itemTestsArray;
	}
	catch(err)
	{
		logger.debug(&quot;Error in Code Template (FHIR Translation) in CreateDiagnoticOrderItemArray() function: &quot; + err);
	}
}


</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>7c21d932-a0b8-472c-8de4-1368eb30d0fd</id>
            <name>Get Resource From Bundle</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738097</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Get a Specific Resource from a FHIR Bundle.

	@param {JSON}   inFHIR - FHIR object (JSON). 
	@param {string} inResourceName - Name of resource to find.
	@return {array} return array of resources found. (could be more than one).
*/
//
// @param {JSON}   inResource - FHIR object (JSON).
// @param {string} inResourceName - Name of resource to find.
function GetResourceFromBundle(inFHIR, inResourceName)
{
	var BundleRes 	= new Array();
	var cntRes	= 0;
	
	for each (seg in inFHIR) 
	{
		//logger.debug(&quot;resource:&quot;  + JSON.stringify(seg));
		//loop through entries
		for each (entries in seg)
		{
			if (entries != null)
			{
				//logger.debug(&quot;resource:&quot;  + JSON.stringify(entries.resource));
			
				//
				// get  resource
				//
				if (entries.resource.resourceType.toString().toUpperCase().indexOf(inResourceName) &gt; -1)
				{
					BundleRes[cntRes] = entries.resource;
					//put fullurl at the end.
					BundleRes[cntRes].fullUrl =  entries.fullUrl;
					//logger.debug(&quot;Found &quot; +  inResourceName + &quot; resource: &quot; + JSON.stringify(BundleRes[cntRes]));
					cntRes++;
				} 
			}
			
		}
		
	}
	//logger.debug(&quot;Returning array of bundles: &quot; + BundleRes.length);
	return BundleRes;	
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>7e2d84e9-3e2f-4ecd-9273-39947fe3ac9b</id>
            <name>HL7 Translations  (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738307</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	HL7 translations.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function GetSystem(inSystem)
{
	if (inSystem.toString().toUpperCase().trim() == &quot;HCN&quot;)
	{
		return &quot;JHN&quot;;
	}
}

//ex: 4015551111
function GetTelecomNumber(inNum, isAreaCode)
{
	var rawNum = inNum.replace(/\D+/g,&quot;&quot;);
	//get zip?
	if (isAreaCode)
	{
		return rawNum.substring(0, 3);
	}
	else
	{
		return rawNum.substring(3, 12);
	}
	
}

//https://www.hl7.org/fhir/2015May/administrative-gender.html
function GetGender(inGender)
{
	if (inGender.toString().toUpperCase().trim() == &quot;MALE&quot;)
	{
		 return &quot;M&quot;;
	}
	else if (inGender.toString().toUpperCase().trim() == &quot;FEMALE&quot;)
	{
		return &quot;F&quot;;
	}
	else if (inGender.toString().toUpperCase().trim() == &quot;UNKNOWN&quot;)
	{
		return &quot;U&quot;; 
	}
	
	return &quot;U&quot;;
}

//http://hl7.org/fhir/valueset-contact-point-system.html
function GetTelecomSystem(inTelSystem)
{
	if (inTelSystem.toString().toUpperCase().trim() == &quot;PHONE&quot;)
	{
		return &quot;PH&quot;; //Telephone
	}
	else if (inTelSystem.toString().toUpperCase().trim() == &quot;FAX&quot;) 
	{
		return &quot;FX&quot;;//Fax
	}
	else if (inTelSystem.toString().toUpperCase().trim() == &quot;MOBILE&quot;)
	{
		return &quot;CP&quot;; //Cellular Phone
	}
	else if (inTelSystem.toString().toUpperCase().trim() == &quot;PAGER&quot;) 
	{
		return &quot;BP&quot;; //Beeper		
	}
	else if (inTelSystem.toString().toUpperCase().trim() == &quot;EMAIL&quot;)
	{
		return &quot;INTERNET&quot;;  //Internet Address: Use Only If Telecommunication Use Code Is NET
	}
	return &quot;PH&quot;; //Telephone
}

//http://hl7.org/fhir/valueset-contact-point-use.html
function GetTelecomUse(inTelUse)
{
	if (inTelUse.toString().toUpperCase().trim() == &quot;HOME&quot;) 
	{
		return &quot;PRN&quot;; //Primary Residence Number
	}
	if (inTelUse.toString().toUpperCase().trim() == &quot;TEMP&quot;) //guessing check
	{
		return &quot;ORN&quot;; //Other Residence Number
	}
	//if (inTelUse.toString().toUpperCase().trim() == &quot;&quot;) 
	//{
	//	return &quot;VHN&quot;; //Vacation Home Number
	//}
	if (inTelUse.toString().toUpperCase().trim() == &quot;WORK&quot;) 
	{
		return &quot;WPN&quot;; //Work Number 
	}
	//if (inTelUse.toString().toUpperCase().trim() == &quot;&quot;) 
	//{
	//	return &quot;ASN&quot;; //Answering Service Number 
	//}
	//if (inTelUse.toString().toUpperCase().trim() == &quot;&quot;) 
	//{
	//	return &quot;EMR&quot;; //Emergency Number
	//}
	if (inTelUse.toString().toUpperCase().trim() == &quot;MOBILE&quot;) 
	{
		return &quot;NET&quot;; //Network (email) Address
	}
	//if (inTelUse.toString().toUpperCase().trim() == &quot;&quot;) 
	//{
	//	return &quot;BPN&quot;;
	//}
	return &quot;PRN&quot;; //Primary Residence Number
}

//https://www.hl7.org/fhir/valueset-address-use.html
function GetAddressUse(inAddUse)
{
	//if (inAddUse.toString().toUpperCase().trim() == &quot;&quot;) 
	//{
	//	return &quot;M&quot;; //Mailing
	//}
	//if (inAddUse.toString().toUpperCase().trim() == &quot;&quot;) 
	//{
	//	return &quot;B&quot;; //Firm/Business
	//}
	try{
		logger.info(&quot;GetADdressUse&quot;);
	if (inAddUse.toString().toUpperCase().trim() == &quot;WORK&quot;) 
	{
		return &quot;O&quot;; //Office
	}
	if (inAddUse.toString().toUpperCase().trim() == &quot;HOME&quot;) 
	{
		return &quot;H&quot;; //Home
	}
	if (inAddUse.toString().toUpperCase().trim() == &quot;TEMP&quot;) 
	{
		return &quot;E&quot;; //Emergency Contact Address
	}
	return &quot;H&quot;; //Mailing
	} catch(err){
		return &quot;H&quot;;
	}
	
	
}

//ex: 2000-11-11
function GetHL7BirthDate(inFHIRDOB)
{
	logger.info(&quot;retrieving DOB:&quot; + inFHIRDOB);
	return inFHIRDOB.toString().replace(/-/g, &quot;&quot;);
	
}

//IntRLab wants YYYYMMDDHHMMSS-ZZZZ
//inDate is ISO 8601 - 1985-07-27T19:30:20.111Z
//return  &quot;yyyyMMddHHmmssZZZZ&quot;
function GetHL7Date(inISODate)
{
	//var objRegExp = /(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})/;
	//var result = inISODate.replace(objRegExp, &quot;$1$2$3$4$5$6-0800&quot;);
	return DateUtil.getCurrentDate(&quot;yyyyMMddHHmmssZZZZ&quot;);
	//return DateUtil.formatDate(&quot;YYYYMMDDHHMMSS-ZZZZ&quot;, date);
	//DateUtil.convertDate(&quot;YYYY-MM-DD-THH:MM:SS.UUUU[+|-ZZzz]&quot;, &quot;YYYYMMDDHHMMSS-ZZZZ&quot;, date)

	
	try
	{
	     return &quot;20160219214532-8000&quot;;
		var dtISO =  new Date(inISODate);//FHIR = &quot;1985-07-27T19:30:20.111Z&quot;
		//logger.info(&quot;dt readable: &quot; + dtISO.toDateString());
		//logger.info(&quot;dt incoming: &quot; + connectorMessage.getRawData());
		
		//ensure month and day are two digits for HL7
		var dtMonth = dtISO.getMonth() + 1;
		    dtMonth = (&quot;0&quot; + dtMonth).slice(-2);
		var dtDay = (&quot;0&quot; + dtISO.getDate()).slice(-2);
		
		//logger.info(&quot;before convert&quot;);
		var dtHL7 = dtISO.getFullYear().toString() + dtMonth.toString() + dtDay.toString() + dtISO.getHours().toLocaleString(&apos;en-US&apos;, {minimumIntegerDigits: 2, useGrouping:false}) + dtISO.getMinutes().toLocaleString(&apos;en-US&apos;, {minimumIntegerDigits: 2, useGrouping:false}) + dtISO.getSeconds().toLocaleString(&apos;en-US&apos;, {minimumIntegerDigits: 2, useGrouping:false});
		//logger.info(&quot;after convert&quot;);
		
		var offset = dtISO.getTimezoneOffset(), o = Math.abs(offset);
		//var offset = new Date().getTimezoneOffset(), o = Math.abs(offset);
		var dtTimeZone = (offset &lt; 0 ? &quot;+&quot; : &quot;-&quot;) + (&quot;00&quot; + Math.floor(o / 60)).slice(-2) + &quot;:&quot; + (&quot;00&quot; + (o % 60)).slice(-2);

		var outHL7Date =  dtHL7 + dtTimeZone.toString().replace(&apos;:&apos;, &apos;&apos;);
		logger.info(&quot;HL7 Formatted Date from FHIR: &quot; + dtHL7 + dtTimeZone.toString().replace(&apos;:&apos;, &apos;&apos;));

		return outHL7Date;
	}
	catch(err)
	{
		logger.info(&quot;Code Template Function (GetHL7Date) error converting date: &quot; + inISODate + &quot; &quot; + err);
 		throw(err);
	}
}


// @param {String} inISODate - ISO date in string format.
// @param {String} inFormat - Date format as string (ex: MM-DD-yyyy)
// @return {String} return - outDate either empty or containing converted date
function GetHL7DateFromISO(inISODate, inFormat)
{
	var outDate;
	//logger.debug(&quot; In GetHL7DateFromISO  inISODate: &quot; + inISODate);
	//logger.debug(&quot; In GetHL7DateFromISO  inFormat: &quot; + inFormat);
	
	try
	{
		if (inISODate != &quot;&quot;)
		{
			var dtISODash 	= PutDashInISODate(inISODate);			
			var newDate 	=  new Date(dtISODash);

			if (newDate.toString().toUpperCase() != &quot;INVALID DATE&quot;)
			{
				outDate = DateUtil.formatDate(inFormat, new Date(dtISODash));
			}
			else
			{				
				outDate = &quot; &quot;;
			}
			logger.debug(&quot; In GetHL7DateFromISO  outDate: &quot; + outDate);	
		}
		logger.debug(&quot;returning outDate GetHL7DateFromISO: &quot; + outDate);
		return outDate;
	}
	catch(err)
	{
		logger.error(&quot;in GetHL7DateFromISO: &quot; + err);
		return &quot; &quot;;
	}
}

//inISODate - ex:  20160322T09:01:00-03:00
function PutDashInISODate(inISODate)
{
	
	try
	{
		//split date and time
		//var inISODate  = &quot;20160322T09:01:00-03:00&quot;;
		var arrISODate = inISODate.split(&quot;T&quot;);
		var dtISO      = arrISODate[0]; //ex: 20160322
		var timeISO    = arrISODate[1]; //ex: 09:01:00-03:00

		//add dashes
		var dtMonth = dtISO.substring(4, 6);
		var dtYear  = dtISO.substring(0, 4);
		var dtDay   = dtISO.substring(6, 8);
		var dtFinal = dtYear + &quot;-&quot; + dtMonth + &quot;-&quot; + dtDay;

		return dtFinal + (timeISO? &quot;T&quot; + timeISO:&quot;&quot;);
	}
	catch(err)
	{
		logger.error(&quot;Error in PutDashInISODate(): code template&quot; + err)
		return &quot; &quot;;
	}
}
//ex: &quot;fullUrl&quot;:&quot;/diagnosticorder/80129531111&quot;
function GetOrderID(inFHIRFullURL)
{
	var arrFullURL = inFHIRFullURL.toString().split(&apos;/&apos;);
	return arrFullURL[2];
}

//PV1-2
function GetPatientClass(inFHIRClass)
{
	//Z = Community (eg practitioner&apos;s office) - OLIS localization
	//E = Emergency
	//I = Inpatient
	//L = Long-term care facility - OLIS localization
	//O = Outpatient
	//P = Preadmit
	
	return &quot;Z&quot;;
}

//OBR-25
function GetTestStatus(inFHIRStatus)
{
	//A = some, but not all, results available
	//C = Correction to results
	//E = Expired. OLIS localization
	//F = Final results
	//I = No results available. Use to indicated that a specimen has been collected
	//O = Order received
	//P = Premlim
	//X = no results available, order cancelled
	
	return &quot;I&quot;;
}

//OBR-27.6
function GetTestPriority(inFHIRPriority)
{
	//R   = Routine
	//RF  = Routine Fax
	//RN  = Routine/Notify
	//RFN = Routine Fax and Notify 
	//SF  = Stat/Fax
	//SFN = Stat/Fax and Notify
	//SN  = Stat Notify
	
	if (inFHIRPriority.toString().trim().toUpperCase() == &quot;ROUTINE&quot;)
	{
		return &quot;R&quot;;
	}
	else if (inFHIRPriority.toString().trim().toUpperCase() == &quot;STAT ORDER&quot;)
	{
		return &quot;SN&quot;;
	}
	else if (inFHIRPriority.toString().trim().toUpperCase() == &quot;STAT PHONE&quot;)
	{
		return &quot;SN&quot;;
	}
	else if (inFHIRPriority.toString().trim().toUpperCase() == &quot;STAT FAX&quot;)
	{
		return &quot;SF&quot;;
	}
	else if (inFHIRPriority.toString().trim().toUpperCase() == &quot;PHONE&quot;)
	{
		return &quot;RN&quot;; //RN, RFN
	}
	else if (inFHIRPriority.toString().trim().toUpperCase() == &quot;FAX&quot;)
	{
		return &quot;RF&quot;; //RF, RFN
	}
	else if (inFHIRPriority.toString().trim().toUpperCase() == &quot;STAT&quot;)
	{
		return &quot;SN&quot;; //SN, SF, SFN
	}
	 
	//if all else fails...
	return &quot;R&quot;;
}


//ZBX-14
function GetTestPriorityContactPoint(inFHIRPriority, inFHIRContactPoint)
{
	//R   = Routine
	//RF  = Routine Fax
	//RN  = Routine/Notify
	//SF  = Stat/Fax
	//SN  = Stat Notify
	
	if (inFHIRPriority.toString().trim().toUpperCase() == &quot;ROUTINE&quot; &amp;&amp;
	    inFHIRContactPoint.toString().trim() == &quot;&quot; )
	{
		return &quot;R&quot;;
	}
	else if (inFHIRPriority.toString().trim().toUpperCase() == &quot;ROUTINE&quot; &amp;&amp;
		    inFHIRContactPoint.toString().trim().toUpperCase() == &quot;FAX&quot; )
	{
		return &quot;RF&quot;;
	}
	else if (inFHIRPriority.toString().trim().toUpperCase() == &quot;ROUTINE&quot; &amp;&amp;
		    inFHIRContactPoint.toString().trim().toUpperCase() == &quot;PHONE&quot; )
	{
		return &quot;RN&quot;;
	}
	else if (inFHIRPriority.toString().trim().toUpperCase() == &quot;STAT&quot; &amp;&amp;
		    inFHIRContactPoint.toString().trim().toUpperCase() == &quot;FAX&quot; )
	{
		return &quot;SF&quot;;
	}
	else if (inFHIRPriority.toString().trim().toUpperCase() == &quot;STAT&quot; &amp;&amp;
		    inFHIRContactPoint.toString().trim().toUpperCase() == &quot;PHONE&quot; )
	{
		return &quot;SN&quot;;
	}
	 
	//if all else fails...
	return &quot;R&quot;;
}

//ZBR-16.4
function GetTestLevelSystem(inFHIRSystem)
{
	//F = Fax
	//N = Phone
	
	if (inFHIRSystem.toString().trim().toUpperCase() == &quot;PHONE&quot;)
	{
		return &quot;N&quot;;
	}
	else if (inFHIRSystem.toString().trim().toUpperCase() == &quot;FAX&quot;)
	{
		return &quot;F&quot;;
	}
	else
	{
		return &quot;&quot;;
	}
}

//1=yes, 0=no
function GetEHealthLabel(inValue)
{
	try
	{
		if (inValue == true)
		{
			return &quot;1&quot;;
		}
		else
		{
			return &quot;0&quot;;
		}
		
	}
	catch(err)
	{
		return &quot;0&quot;;
	}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>38162f67-c407-4342-9a8a-5c45d8e12ae5</id>
            <name>IntRlab HL7 Response Has Multiple Orders?  (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738682</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Check if IntRLab HL7 Load Has One or Multiple ORMs.

	@param {String} xml - the HL7 response in XML format.
	@return {boolean} return true or false.

	http://www.mirthcorp.com/community/forums/showthread.php?t=6902&amp;highlight=add+node+template+xml
*/
function HasMultipleORMsMessages(xml)
{
	try
	{
		var isMultiORM = false;
		var mshCount = 0;
	
		//loop through IntRLabs response...
		for each (group in xml.children())
		{
			if (group.toString().indexOf(&quot;&lt;MSH&gt;&quot;) &gt; -1)
			{
				//the first MSH is the response header
				mshCount++;
				//logger.info(&quot;FOUND MSH GROUP: &quot; + group);
			}
		}
		//logger.info(&quot;MSH COUNT in response is : &quot; + mshCount);
	
		if (mshCount &gt; 2)
		{
			isMultiORM = true;
		}
	
	}
	catch(err)
	{
		//log visual error.
		//responseMap.put(&apos;Error in Transformaton to FHIR:&apos;, err.toString());
		logger.error(&quot;Error in Transformaton to FHIR: &quot;, err.message);
		//throw err;
		//channelMap.put(&apos;Error in Transformaton to FHIR: &apos;, err);
	}
	return isMultiORM;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>910d6685-3a19-4891-8d8e-6951e0873a55</id>
            <name>Repository Order Bundle Has Mutiple Tests? (LifeLabs)</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202737897</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Parameter is a JSON bundle object from a channel.
	Returns boolean if order exists along with order count.

	@param {JSON} inOrderBundle - 
	@return {boolean|string} return ex: true/2
*/
function HasMultipleOrdersInFHIRBundle(inOrderBundle) {

	//logger.debug(&quot;In Code Template  HasMultipleOrdersInFHIRBundle: &quot; + JSON.stringify(inOrderBundle)); 
	var cntOrder = 0;
	
	for each (seg in inOrderBundle) 
	{
		//logger.info(&quot;SEG: &quot; + JSON.stringify(seg));
		if (seg.toString().toUpperCase() != &quot;BUNDLE&quot;)
		{
			//[{&quot;fullUrl&quot;:&quot;urn:uuid:cd7d3525-882e-448c-ba3f-86e2e3fdc7bb&quot;,&quot;resource&quot;:{&quot;resourceType&quot;:&quot;Patient&quot;,&quot;identifier&quot;:[{&quot;use&quot;:&quot;official&quot;,&quot;type&quot;:{&quot;coding&quot;:[{&quot;system&quot;:&quot;hcn&quot;,&quot;code&quot;:&quot;9698701704&quot;}]}}],&quot;name&quot;:[{&quot;use&quot;:&quot;usual&quot;,&quot;family&quot;:[&quot;XCLOGIUDICE&quot;],&quot;given&quot;:[&quot;PLIS&quot;]}],&quot;telecom&quot;:[{&quot;system&quot;:&quot;phone&quot;,&quot;value&quot;:&quot;619-958-0123&quot;,&quot;use&quot;:&quot;home&quot;}],&quot;gender&quot;:&quot;male&quot;,&quot;birthDate&quot;:&quot;19551202&quot;,&quot;address&quot;:[{&quot;use&quot;:&quot;home&quot;,&quot;line&quot;:[&quot;6531 EDMOND TOWERS&quot;],&quot;city&quot;:&quot;Lumby&quot;,&quot;state&quot;:&quot;BC&quot;,&quot;postalCode&quot;:&quot;V1S 8G0&quot;,&quot;country&quot;:&quot;can&quot;}]}},{&quot;fullUrl&quot;:&quot;urn:uuid:7459701d-383f-4703-85f3-463729a13eb0&quot;,&quot;resource&quot;:{&quot;resourceType&quot;:&quot;Practitioner&quot;,&quot;identifier&quot;:[{&quot;use&quot;:&quot;official&quot;,&quot;value&quot;:&quot;895&quot;}],&quot;name&quot;:{&quot;family&quot;:[&quot;BRADFORD&quot;],&quot;given&quot;:[&quot;MOIRA&quot;],&quot;prefix&quot;:[&quot;Dr&quot;]},&quot;telecom&quot;:[{&quot;system&quot;:&quot;phone&quot;,&quot;value&quot;:&quot;6042994388&quot;,&quot;use&quot;:&quot;work&quot;},{&quot;system&quot;:&quot;fax&quot;,&quot;value&quot;:&quot;6042991405&quot;}],&quot;address&quot;:[{&quot;line&quot;:[&quot;4349 EAST HASTINGS ST&quot;],&quot;city&quot;:&quot;BURNABY&quot;,&quot;state&quot;:&quot;BC&quot;,&quot;postalCode&quot;:&quot;V5C 2J8&quot;,&quot;country&quot;:&quot;Canada&quot;}],&quot;practitionerRole&quot;:[{&quot;role&quot;:{&quot;coding&quot;:[{&quot;system&quot;:&quot;role&quot;,&quot;code&quot;:&quot;doctor&quot;}]}}]}},{&quot;fullUrl&quot;:&quot;urn:uuid:71c9776e-569b-416d-9e81-2c23469d1d46&quot;,&quot;resource&quot;:{&quot;resourceType&quot;:&quot;DiagnosticOrder&quot;,&quot;extension&quot;:[{&quot;url&quot;:&quot;DiagnosticOrder/claimType&quot;,&quot;valueString&quot;:&quot;M&quot;},{&quot;url&quot;:&quot;DiagnosticOrder/priority&quot;,&quot;valueString&quot;:&quot;Routine&quot;}],&quot;subject&quot;:{&quot;reference&quot;:&quot;urn:uuid:cd7d3525-882e-448c-ba3f-86e2e3fdc7bb&quot;},&quot;orderer&quot;:{&quot;reference&quot;:&quot;urn:uuid:7459701d-383f-4703-85f3-463729a13eb0&quot;},&quot;encounter&quot;:{&quot;reference&quot;:&quot;urn:uuid:02fcfed2-bb05-486f-97a4-9adc6f7d946a&quot;},&quot;item&quot;:[{&quot;extension&quot;:[{&quot;url&quot;:&quot;DiagnosticOrder/item/claimType&quot;,&quot;valueString&quot;:&quot;M&quot;},{&quot;url&quot;:&quot;DiagnosticOrder/item/priority&quot;,&quot;valueString&quot;:&quot;Routine&quot;}],&quot;code&quot;:{&quot;extension&quot;:[{&quot;url&quot;:&quot;DiagnosticOrder/item/code/mnemonic&quot;,&quot;valueString&quot;:&quot;IM&quot;}],&quot;coding&quot;:[{&quot;system&quot;:&quot;Intrlab&quot;,&quot;code&quot;:&quot;1205&quot;}],&quot;text&quot;:&quot;BLOOD FILM REVIEW&quot;}},{&quot;extension&quot;:[{&quot;url&quot;:&quot;DiagnosticOrder/item/claimType&quot;,&quot;valueString&quot;:&quot;M&quot;},{&quot;url&quot;:&quot;DiagnosticOrder/item/priority&quot;,&quot;valueString&quot;:&quot;Routine&quot;}],&quot;code&quot;:{&quot;extension&quot;:[{&quot;url&quot;:&quot;DiagnosticOrder/item/code/mnemonic&quot;,&quot;valueString&quot;:&quot;---&quot;}],&quot;coding&quot;:[{&quot;system&quot;:&quot;Intrlab&quot;,&quot;code&quot;:&quot;1148&quot;}],&quot;text&quot;:&quot;---&quot;}},{&quot;extension&quot;:[{&quot;url&quot;:&quot;DiagnosticOrder/item/claimType&quot;,&quot;valueString&quot;:&quot;M&quot;},{&quot;url&quot;:&quot;DiagnosticOrder/item/priority&quot;,&quot;valueString&quot;:&quot;Routine&quot;}],&quot;code&quot;:{&quot;extension&quot;:[{&quot;url&quot;:&quot;DiagnosticOrder/item/code/mnemonic&quot;,&quot;valueString&quot;:&quot;---&quot;}],&quot;coding&quot;:[{&quot;system&quot;:&quot;Intrlab&quot;,&quot;code&quot;:&quot;1165&quot;}],&quot;text&quot;:&quot;---&quot;}},{&quot;extension&quot;:[{&quot;url&quot;:&quot;DiagnosticOrder/item/claimType&quot;,&quot;valueString&quot;:&quot;M&quot;},{&quot;url&quot;:&quot;DiagnosticOrder/item/priority&quot;,&quot;valueString&quot;:&quot;Routine&quot;}],&quot;code&quot;:{&quot;extension&quot;:[{&quot;url&quot;:&quot;DiagnosticOrder/item/code/mnemonic&quot;,&quot;valueString&quot;:&quot;---&quot;}],&quot;coding&quot;:[{&quot;system&quot;:&quot;Intrlab&quot;,&quot;code&quot;:&quot;1167&quot;}],&quot;text&quot;:&quot;---&quot;}}]}},{&quot;fullUrl&quot;:&quot;urn:uuid:02fcfed2-bb05-486f-97a4-9adc6f7d946a&quot;,&quot;resource&quot;:{&quot;resourceType&quot;:&quot;Encounter&quot;,&quot;location&quot;:[{&quot;location&quot;:{&quot;reference&quot;:&quot;urn:uuid:67b34dd5-b4d1-4006-88d2-a2c5741607cd&quot;}}]}},{&quot;fullUrl&quot;:&quot;urn:uuid:67b34dd5-b4d1-4006-88d2-a2c5741607cd&quot;,&quot;resource&quot;:{&quot;resourceType&quot;:&quot;Location&quot;,&quot;extension&quot;:[{&quot;url&quot;:&quot;location-group&quot;,&quot;valueString&quot;:&quot;BRL&quot;}],&quot;identifier&quot;:[{&quot;value&quot;:&quot;523&quot;}]}}]
			//logger.debug(&quot;have all entries: &quot; + JSON.stringify(seg));
			
			//loop
			for each (entries in seg)
			{
				if (entries != null)
				{
					//{&quot;fullUrl&quot;:&quot;urn:uuid:cd7d3525-882e-448c-ba3f-86e2e3fdc7bb&quot;,&quot;resource&quot;:{&quot;resourceType&quot;:&quot;Patient&quot;,&quot;identifier&quot;:[{&quot;use&quot;:&quot;official&quot;,&quot;type&quot;:{&quot;coding&quot;:[{&quot;system&quot;:&quot;hcn&quot;,&quot;code&quot;:&quot;9698701704&quot;}]}}],&quot;name&quot;:[{&quot;use&quot;:&quot;usual&quot;,&quot;family&quot;:[&quot;XCLOGIUDICE&quot;],&quot;given&quot;:[&quot;PLIS&quot;]}],&quot;telecom&quot;:[{&quot;system&quot;:&quot;phone&quot;,&quot;value&quot;:&quot;619-958-0123&quot;,&quot;use&quot;:&quot;home&quot;}],&quot;gender&quot;:&quot;male&quot;,&quot;birthDate&quot;:&quot;19551202&quot;,&quot;address&quot;:[{&quot;use&quot;:&quot;home&quot;,&quot;line&quot;:[&quot;6531 EDMOND TOWERS&quot;],&quot;city&quot;:&quot;Lumby&quot;,&quot;state&quot;:&quot;BC&quot;,&quot;postalCode&quot;:&quot;V1S 8G0&quot;,&quot;country&quot;:&quot;can&quot;}]}}
					//logger.debug(&quot;entry: &quot; + JSON.stringify(entries));
					//loop
					//for each (resEntry in entries)
					//{
						
						if (entries.resource.resourceType.toString().toUpperCase().indexOf(&apos;DIAGNOSTICORDER&apos;) &gt; -1)
						{
							//logger.debug(&quot;entries.resource.resourceType.toString(): &quot; + entries.resource.resourceType.toString());
							//logger.debug(&quot;entry DiagnosticOrder: &quot; + JSON.stringify(entries));//this the order resource object
							
							//logger.debug(&quot;resourceType: &quot; + entries.resource.resourceType);

							//[{&quot;url&quot;:&quot;DiagnosticOrder/claimType&quot;,&quot;valueString&quot;:&quot;M&quot;},{&quot;url&quot;:&quot;DiagnosticOrder/priority&quot;,&quot;valueString&quot;:&quot;Routine&quot;}]
							//logger.info(&quot;-------&quot; + JSON.stringify(resEntry.extension));
							//logger.info(&quot;-------&quot; + JSON.stringify(resEntry.item));
							
							if (entries.resource.item != null || entries.resource.item != undefined )
							{
								//logger.info(&quot;FOUND ITEMS: &quot; + JSON.stringify(resEntry.item));
								//loop
								for each (itemOrder in entries.resource.item)
								{
									//logger.info(&quot;found item---: &quot; + JSON.stringify(itemOrder));
									cntOrder++;
								}
							}
						}
						
					//}
					
				}
			}
		}
	}

	if (cntOrder == 1)
	{
		logger.info(&quot;Bundle does NOT have multiple tests:&quot; + cntOrder);
		return false + &quot;|&quot; + cntOrder;
	}
	
	logger.info(&quot;Bundle does DOES have multiple tests: &quot; +  cntOrder);
	//requestor needs to know how many orders are in bundle
	//send back count plus true/false
	//ex: false|1  (one order)
	//ex: true|3 (three orders)
	return true + &quot;|&quot; + cntOrder;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>fe7a7e97-b0f9-4d0e-93db-9f175de92c11</id>
            <name>Set Resource in Bundle</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738595</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Set/Assign a Specific Resource and fullURL in a FHIR Bundle.

	@param {JSON}   inFHIR - 
	@param {string} inResourceName - 
	@return {JSON} return updated FHIR Bundle
*/
function SetResourceInBundle(inFHIR, inFHIRResouce, inUUID) {
	
	//logger.debug(&quot;In SetResourceInBundle. Adding&quot; + inFHIRResouce);
	
	inFHIR.entry[inFHIR.entry.length] 		      = inFHIRResouce;
	inFHIR.entry[inFHIR.entry.length-1].fullUrl   =  inUUID;
	
	return inFHIR;	
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="4.5.2">
        <id>e3f06a6d-3b5e-4ab5-aa47-26d56e59203c</id>
        <name>TECH CONNECT 2019 - Tutorial FHIR on MIRTH</name>
        <revision>1</revision>
        <lastModified>
          <time>1732202737547</time>
          <timezone>America/Santiago</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>2f9bec13-06c5-41ef-a660-39df1b6183b1</string>
          <string>e4eaca5e-7995-48a1-a222-8980dc3cb1a5</string>
          <string>fac21808-36c6-4f79-9a53-988a2e904963</string>
          <string>20ee9ef1-ec5b-42f1-a2e8-8bcfd9a501a3</string>
          <string>48f21677-b04f-4388-abbc-dade55e87dc8</string>
          <string>69e2bce0-deae-4beb-9ad7-f5b9f7acfdc5</string>
          <string>f3f4ef90-5179-423f-8560-929d3e7bd4d0</string>
          <string>99ff7c87-62b0-41cb-ab6c-76568bcf95f2</string>
          <string>6392ddae-5a4e-4429-be8f-9240e150365a</string>
          <string>5ca59f01-8010-441b-a10b-4ef7638ec21d</string>
          <string>0b1b563a-954f-418b-aca2-2155e3ea2488</string>
          <string>4013272e-b8e4-4107-aec7-f418fa8541a2</string>
          <string>3f6946da-5006-4059-bed5-55962106eaca</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="4.5.2">
            <id>ac585968-36a4-4525-b631-b80e6b2bc34f</id>
            <name>create_UUID</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738832</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function create_UUID(){
    var dt = new Date().getTime();
    var uuid = &apos;xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx&apos;.replace(/[xy]/g, function(c) {
        var r = (dt + Math.random()*16)%16 | 0;
        dt = Math.floor(dt/16);
        return (c==&apos;x&apos; ? r :(r&amp;0x3|0x8)).toString(16);
    });
    return uuid;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>f5d00753-b50a-4fc7-bd0d-072ab84b3ee2</id>
            <name>getGender</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738799</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getGender(arg1) {
  if (arg1 == &quot;M&quot; ) {
    return  &quot;male&quot;
  } else {
    return &quot;female&quot;
  }
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="4.5.2">
            <id>1b523401-e9ed-4daf-a3ed-32d607e9c27e</id>
            <name>getMarital</name>
            <revision>1</revision>
            <lastModified>
              <time>1732202738379</time>
              <timezone>America/Santiago</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Modify the description here. Modify the function name and parameters as needed. One function per
	template is recommended; create a new code template for each new function.

	@param {String} arg1 - arg1 description
	@return {String} return description
*/
function getMarital(arg1) {
  if (arg1 == &quot;S&quot; ) {
    return  &quot;Never Married&quot;
  } else if (arg1 == &quot;M&quot; ){
    return &quot;Married&quot;
  } else if (arg1 == &quot;D&quot; ){
    return &quot;Divorced&quot;
  }
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>